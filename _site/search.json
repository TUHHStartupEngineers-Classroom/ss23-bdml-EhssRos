[
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh.\nThis is a .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites."
  },
  {
    "objectID": "content/01_journal/01_tidyverse.html#header-2",
    "href": "content/01_journal/01_tidyverse.html#header-2",
    "title": "Tidyverse",
    "section": "\n2.1 Header 2",
    "text": "2.1 Header 2\nHeader 3\nHeader 4\nHeader 5\nHeader 6"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "Note\n\n\n\nYou can delete everything in here and start fresh."
  },
  {
    "objectID": "content/01_journal/05_Chapter_1_Challege.html",
    "href": "content/01_journal/05_Chapter_1_Challege.html",
    "title": "Challenge 1",
    "section": "",
    "text": "Your organization wants to know which companies are similar to each other to help in identifying potential customers of a SAAS software solution (e.g. Salesforce CRM or equivalent) in various segments of the market. The Sales Department is very interested in this analysis, which will help them more easily penetrate various market segments.\nYou will be using stock prices in this analysis. You come up with a method to classify companies based on how their stocks trade using their daily stock returns (percentage movement from one day to the next). This analysis will help your organization determine which companies are related to each other (competitors and have similar attributes).\nYou can analyze the stock prices using what you’ve learned in the unsupervised learning tools including K-Means and UMAP. You will use a combination of kmeans() to find groups and umap() to visualize similarity of daily stock returns."
  },
  {
    "objectID": "content/01_journal/05_Chapter_1_Challege.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "href": "content/01_journal/05_Chapter_1_Challege.html#step-1---convert-stock-prices-to-a-standardized-format-daily-returns",
    "title": "Challenge 1",
    "section": "\n5.1 Step 1 - Convert stock prices to a standardized format (daily returns)",
    "text": "5.1 Step 1 - Convert stock prices to a standardized format (daily returns)\nWhat you first need to do is get the data in a format that can be converted to a “user-item” style matrix. The challenge here is to connect the dots between what we have and what we need to do to format it properly.\nWe know that in order to compare the data, it needs to be standardized or normalized. Why? Because we cannot compare values (stock prices) that are of completely different magnitudes. In order to standardize, we will convert from adjusted stock price (dollar value) to daily returns (percent change from previous day). Here is the formula.\n\\[\nreturn_{daily} = \\frac{price_{i}-price_{i-1}}{price_{i-1}}\n\\]\nFirst, what do we have? We have stock prices for every stock in the SP 500 Index, which is the daily stock prices for over 500 stocks. The data set is over 1.2M observations.\n\nsp_500_prices_tbl %&gt;% glimpse()\n\n#&gt; Rows: 1,225,765\n#&gt; Columns: 8\n#&gt; $ symbol   &lt;chr&gt; \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT\", \"MSFT…\n#&gt; $ date     &lt;date&gt; 2009-01-02, 2009-01-05, 2009-01-06, 2009-01-07, 2009-01-08, …\n#&gt; $ open     &lt;dbl&gt; 19.53, 20.20, 20.75, 20.19, 19.63, 20.17, 19.71, 19.52, 19.53…\n#&gt; $ high     &lt;dbl&gt; 20.40, 20.67, 21.00, 20.29, 20.19, 20.30, 19.79, 19.99, 19.68…\n#&gt; $ low      &lt;dbl&gt; 19.37, 20.06, 20.61, 19.48, 19.55, 19.41, 19.30, 19.52, 19.01…\n#&gt; $ close    &lt;dbl&gt; 20.33, 20.52, 20.76, 19.51, 20.12, 19.52, 19.47, 19.82, 19.09…\n#&gt; $ volume   &lt;dbl&gt; 50084000, 61475200, 58083400, 72709900, 70255400, 49815300, 5…\n#&gt; $ adjusted &lt;dbl&gt; 15.86624, 16.01451, 16.20183, 15.22628, 15.70234, 15.23408, 1…\n\n\nYour first task is to convert to a tibble named sp_500_daily_returns_tbl by performing the following operations:\n\nSelect the symbol, date and adjusted columns\nFilter to dates beginning in the year 2018 and beyond.\nCompute a Lag of 1 day on the adjusted stock price. Be sure to group by symbol first, otherwise we will have lags computed using values from the previous stock in the data frame.\nRemove a NA values from the lagging operation\nCompute the difference between adjusted and the lag\nCompute the percentage difference by dividing the difference by that lag. Name this column pct_return.\nReturn only the symbol, date, and pct_return columns\nSave as a variable named sp_500_daily_returns_tbl\n\n\n\n# Apply your data transformation skills!\nsp_500_daily_returns_tbl &lt;- sp_500_prices_tbl %&gt;%\n  select(symbol, date, adjusted) %&gt;%\n  mutate(year = year(date)) %&gt;%\n  filter(year &gt;= 2018) %&gt;%\n  group_by(symbol) %&gt;%\n  mutate(\n    last_adjusted = lag(adjusted, n = 1, default = NA),\n    lag_diff = adjusted - last_adjusted,\n    pct_return = lag_diff / last_adjusted\n  ) %&gt;%\n  filter(!is.na(last_adjusted)) %&gt;%\n  ungroup() %&gt;%\n  select(symbol, date, pct_return) %&gt;%\n  arrange(symbol)\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n# Output: sp_500_daily_returns_tbl"
  },
  {
    "objectID": "content/01_journal/05_Chapter_1_Challege.html#step-2---convert-to-user-item-format",
    "href": "content/01_journal/05_Chapter_1_Challege.html#step-2---convert-to-user-item-format",
    "title": "Challenge 1",
    "section": "\n5.2 Step 2 - Convert to User-Item Format",
    "text": "5.2 Step 2 - Convert to User-Item Format\nThe next step is to convert to a user-item format with the symbol in the first column and every other column the value of the daily returns (pct_return) for every stock at each date.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nsp_500_daily_returns_tbl &lt;- read_rds(\"sp_500_daily_returns_tbl.rds\")\nsp_500_daily_returns_tbl\n\n\n\n  \n\n\n\nNow that we have the daily returns (percentage change from one day to the next), we can convert to a user-item format. The user in this case is the symbol (company), and the item in this case is the pct_return at each date.\n\nSpread the date column to get the values as percentage returns. Make sure to fill an NA values with zeros.\nSave the result as stock_date_matrix_tbl\n\n\n\n# Convert to User-Item Format\nstock_date_matrix_tbl &lt;- sp_500_daily_returns_tbl %&gt;%\n                      pivot_wider(names_from = date, values_from = pct_return, values_fill = 0)\nstock_date_matrix_tbl\n\n\n\n  \n\n\n# Output: stock_date_matrix_tbl"
  },
  {
    "objectID": "content/01_journal/05_Chapter_1_Challege.html#step-3---perform-k-means-clustering",
    "href": "content/01_journal/05_Chapter_1_Challege.html#step-3---perform-k-means-clustering",
    "title": "Challenge 1",
    "section": "\n5.3 Step 3 - Perform K-Means Clustering",
    "text": "5.3 Step 3 - Perform K-Means Clustering\nNext, we’ll perform K-Means clustering.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nstock_date_matrix_tbl &lt;- read_rds(\"stock_date_matrix_tbl.rds\")\n\nBeginning with the stock_date_matrix_tbl, perform the following operations:\n\nDrop the non-numeric column, symbol\n\nPerform kmeans() with centers = 4 and nstart = 20\n\nSave the result as kmeans_obj\n\n\n\n# Create kmeans_obj for 4 centers\nkmeans_obj &lt;- stock_date_matrix_tbl %&gt;%\n              select(-symbol) %&gt;%\n              kmeans(centers = 4, nstart = 20)\n\n\nkmeans_obj$cluster\n\n#&gt;   [1] 4 2 4 2 4 4 2 4 4 2 2 4 4 4 2 3 3 3 4 4 4 3 4 4 2 4 2 4 4 4 2 2 2 4 4 4 4\n#&gt;  [38] 3 2 2 2 4 4 4 1 1 4 4 4 3 4 3 2 3 2 4 3 4 4 4 4 4 4 4 4 4 4 1 4 4 4 4 4 4\n#&gt;  [75] 4 4 4 3 4 3 4 4 4 4 4 4 3 2 4 4 4 4 4 3 4 4 4 4 3 3 4 4 4 4 4 3 4 3 4 4 4\n#&gt; [112] 1 4 4 3 4 4 2 2 4 4 4 4 4 4 1 1 3 4 4 4 4 4 4 4 4 4 4 4 3 4 4 3 4 3 3 4 1\n#&gt; [149] 4 4 2 4 4 3 4 3 4 4 4 1 3 3 3 3 4 4 3 3 2 3 4 4 3 4 1 4 2 4 1 4 3 2 4 4 4\n#&gt; [186] 4 4 1 4 4 4 4 4 4 3 1 2 4 4 4 4 3 4 4 2 2 4 2 4 4 4 4 4 1 4 4 4 4 3 4 1 1\n#&gt; [223] 4 4 4 4 4 4 1 2 4 4 3 4 4 4 3 4 4 4 2 4 2 2 4 2 2 4 4 2 4 4 3 2 4 4 4 4 4\n#&gt; [260] 4 4 4 4 4 4 4 3 4 2 3 3 2 3 1 4 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 4 2 4 3 4\n#&gt; [297] 4 2 3 3 4 4 2 3 2 4 4 3 4 4 2 4 3 4 4 4 4 3 4 1 4 1 4 2 2 4 4 4 2 2 4 1 4\n#&gt; [334] 4 3 4 2 3 4 2 4 4 1 3 4 2 4 4 2 4 4 4 3 1 4 4 4 1 4 4 4 3 3 4 4 3 4 4 4 4\n#&gt; [371] 4 3 3 4 4 3 4 3 4 4 3 1 4 4 1 2 4 2 4 4 3 4 4 2 4 4 4 4 4 4 4 4 4 4 3 4 4\n#&gt; [408] 4 4 4 3 1 3 4 2 3 3 4 3 4 4 2 4 4 2 4 4 2 3 4 3 4 4 4 4 4 4 4 4 4 2 4 4 4\n#&gt; [445] 3 2 2 2 2 4 2 2 4 3 4 4 4 4 4 4 2 4 4 2 4 4 4 1 4 3 4 2 2 3 3 4 4 4 2 3 3\n#&gt; [482] 4 4 4 3 1 4 4 4 3 2 1 3 2 1 4 4 4 4 4 4 4\n\n\nUse glance() to get the tot.withinss.\n\n# Apply glance() to get the tot.withinss\nbroom::glance(kmeans_obj)"
  },
  {
    "objectID": "content/01_journal/05_Chapter_1_Challege.html#step-4---find-the-optimal-value-of-k",
    "href": "content/01_journal/05_Chapter_1_Challege.html#step-4---find-the-optimal-value-of-k",
    "title": "Challenge 1",
    "section": "\n5.4 Step 4 - Find the optimal value of K",
    "text": "5.4 Step 4 - Find the optimal value of K\nNow that we are familiar with the process for calculating kmeans(), let’s use purrr to iterate over many values of “k” using the centers argument.\nWe’ll use this custom function called kmeans_mapper():\n\nkmeans_mapper &lt;- function(center = 3) {\n    stock_date_matrix_tbl %&gt;%\n        select(-symbol) %&gt;%\n        kmeans(centers = center, nstart = 20)\n}\n\nApply the kmeans_mapper() and glance() functions iteratively using purrr.\n\nCreate a tibble containing column called centers that go from 1 to 30\nAdd a column named k_means with the kmeans_mapper() output. Use mutate() to add the column and map() to map centers to the kmeans_mapper() function.\nAdd a column named glance with the glance() output. Use mutate() and map() again to iterate over the column of k_means.\nSave the output as k_means_mapped_tbl\n\n\n\nk_means_mapped_tbl &lt;- tibble(centers = 1:30)\nk_means_mapped_tbl &lt;- k_means_mapped_tbl %&gt;%\n  mutate(k_means = map(centers, kmeans_mapper))\nk_means_mapped_tbl &lt;- k_means_mapped_tbl %&gt;%\n  mutate(glance = map(k_means, glance))\n\nk_means_mapped_tbl\n\n\n\n  \n\n\n# Output: k_means_mapped_tbl \n\nNext, let’s visualize the “tot.withinss” from the glance output as a Scree Plot.\n\nBegin with the k_means_mapped_tbl\n\nUnnest the glance column\nPlot the centers column (x-axis) versus the tot.withinss column (y-axis) using geom_point() and geom_line()\n\nAdd a title “Scree Plot” and feel free to style it with your favorite theme\n\n\n# Visualize Scree Plot\n#install.packages(\"ggdark\")\nlibrary(ggdark)\n\nk_means_mapped_tbl %&gt;%\n  unnest(glance) %&gt;%\n  select(centers, tot.withinss) %&gt;%\n  \n\n  ggplot(aes(centers, tot.withinss)) +\n  geom_point(color = \"#2DC6D6\", size = 4) +\n  geom_line(color = \"#2DC6D6\", size = 1) +\n  ggrepel::geom_label_repel(aes(label = centers), color = \"#2DC6D6\") + \n  \n\n  labs(title = \"Plot\") +\n  \n   dark_theme_bw()\n\n\n\n\n\n\n\nWe can see that the Scree Plot becomes linear (constant rate of change) between 5 and 10 centers for K."
  },
  {
    "objectID": "content/01_journal/05_Chapter_1_Challege.html#step-5---apply-umap",
    "href": "content/01_journal/05_Chapter_1_Challege.html#step-5---apply-umap",
    "title": "Challenge 1",
    "section": "\n5.5 Step 5 - Apply UMAP",
    "text": "5.5 Step 5 - Apply UMAP\nNext, let’s plot the UMAP 2D visualization to help us investigate cluster assignments.\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\n\nFirst, let’s apply the umap() function to the stock_date_matrix_tbl, which contains our user-item matrix in tibble format.\n\nStart with stock_date_matrix_tbl\n\nDe-select the symbol column\nUse the umap() function storing the output as umap_results\n\n\n\n# Apply UMAP\numap_results &lt;- stock_date_matrix_tbl %&gt;%\n                select(-symbol) %&gt;%\n                umap()\numap_results\n# Store results as: umap_results \n\nNext, we want to combine the layout from the umap_results with the symbol column from the stock_date_matrix_tbl.\n\nStart with umap_results$layout\n\nConvert from a matrix data type to a tibble with as_tibble()\n\nBind the columns of the umap tibble with the symbol column from the stock_date_matrix_tbl.\nSave the results as umap_results_tbl.\n\n\n# Convert umap results to tibble with symbols\numap_results_tbl &lt;- umap_results$layout %&gt;%\n                    as_tibble() %&gt;% \n                    bind_cols(stock_date_matrix_tbl %&gt;% select(symbol) )\n# Output: umap_results_tbl\n\nFinally, let’s make a quick visualization of the umap_results_tbl.\n\nPipe the umap_results_tbl into ggplot() mapping the columns to x-axis and y-axis\nAdd a geom_point() geometry with an alpha = 0.5\n\nApply theme_tq() and add a title “UMAP Projection”\n\n\n# Visualize UMAP results\numap_results_tbl %&gt;%\n    ggplot(aes(V1, V2)) +\n    geom_point(alpha = 0.5) + \n    ggrepel::geom_label_repel(aes(label = symbol), size = 2) +\n    theme_tq() +\n    labs(title = \"UMAP Projection\")\n\n\n\n\n\n\numap_results_tbl\n\n\n\n  \n\n\n\nWe can now see that we have some clusters. However, we still need to combine the K-Means clusters and the UMAP 2D representation."
  },
  {
    "objectID": "content/01_journal/05_Chapter_1_Challege.html#step-6---combine-k-means-and-umap",
    "href": "content/01_journal/05_Chapter_1_Challege.html#step-6---combine-k-means-and-umap",
    "title": "Challenge 1",
    "section": "\n5.6 Step 6 - Combine K-Means and UMAP",
    "text": "5.6 Step 6 - Combine K-Means and UMAP\nNext, we combine the K-Means clusters and the UMAP 2D representation\nWe’re going to import the correct results first (just in case you were not able to complete the last step).\n\nk_means_mapped_tbl &lt;- read_rds(\"k_means_mapped_tbl.rds\")\numap_results_tbl   &lt;- read_rds(\"umap_results_tbl.rds\")\n\nFirst, pull out the K-Means for 10 Centers. Use this since beyond this value the Scree Plot flattens. Have a look at the business case to recall how that works.\n\n# Get the k_means_obj from the 10th center\nk_means_obj &lt;- k_means_mapped_tbl %&gt;%\n              pull(k_means) %&gt;%\n              pluck(10)\n# Store as k_means_obj\n\nNext, we’ll combine the clusters from the k_means_obj with the umap_results_tbl.\n\nBegin with the k_means_obj\n\nAugment the k_means_obj with the stock_date_matrix_tbl to get the clusters added to the end of the tibble\nSelect just the symbol and .cluster columns\nLeft join the result with the umap_results_tbl by the symbol column\nLeft join the result with the result of sp_500_index_tbl %&gt;% select(symbol, company, sector) by the symbol column.\nStore the output as umap_kmeans_results_tbl\n\n\n\n# Use your dplyr & broom skills to combine the k_means_obj with the umap_results_tbl\numap_kmeans_results_tbl &lt;- k_means_obj %&gt;%\n  augment(stock_date_matrix_tbl) %&gt;%\n  select(symbol, .cluster) %&gt;%\n  left_join(umap_results_tbl, by = \"symbol\") %&gt;%\n  left_join(sp_500_index_tbl %&gt;% select(symbol, company, sector), by = \"symbol\")\numap_kmeans_results_tbl\n\n\n\n  \n\n\n# Output: umap_kmeans_results_tbl \n\nPlot the K-Means and UMAP results.\n\nBegin with the umap_kmeans_results_tbl\n\nUse ggplot() mapping V1, V2 and color = .cluster\n\nAdd the geom_point() geometry with alpha = 0.5\n\nApply colors as you desire (e.g. scale_color_manual(values = palette_light() %&gt;% rep(3)))\n\n\n# Visualize the combined K-Means and UMAP results\n\numap_kmeans_results_tbl %&gt;%\n  ggplot(aes(V1, V2, color=.cluster)) +\n  geom_point(alpha=0.5) +\n    ggrepel::geom_label_repel(aes(label = symbol), size = 2)\n\n\n\n\n\n\n umap_kmeans_results_tbl\n\n\n\n  \n\n\n\nCongratulations! You are done with the 1st challenge!"
  },
  {
    "objectID": "content/01_journal/06_challenge_2_ML.html",
    "href": "content/01_journal/06_challenge_2_ML.html",
    "title": "Challenge 2",
    "section": "",
    "text": "#steps 1 Build a model\n2 Create features with the recipes package 3 Bundle the model and recipe with the workflow package\n4 Evaluate your model with the yardstick package\n\n# Load libraries\nlibrary(tidyverse)\nlibrary(parsnip)\nlibrary(recipes)\nlibrary(rsample)\nlibrary(yardstick)\nlibrary(rpart.plot)\nlibrary(workflows)\nlibrary(modeldata)\n# Read data\nbike_orderlines_tbl &lt;- readRDS(\"bike_orderlines.rds\")\n\nlm_model &lt;- linear_reg() %&gt;%\n  set_engine(\"lm\") %&gt;%\n  set_mode(\"regression\")\n\nrecipe_obj &lt;- recipe(total_price ~ ., data = bike_orderlines_tbl) %&gt;%\n  step_rm(order_id,lng,order_line,url,lat) %&gt;%\n  #step_dummy(all_nominal(), one_hot = TRUE) %&gt;%\n  #step_unknown(all_nominal(), -all_outcomes()) %&gt;%\n  #step_normalize(all_numeric()) %&gt;%\n  prep()\n\n\ntrain_data&lt;- bike_orderlines_tbl[1:14000, ]\ntest_data &lt;- bike_orderlines_tbl[14001:15000, ]\n\n\n\nworkflow_obj &lt;- workflow() %&gt;%\n  add_recipe(recipe_obj) %&gt;%\n  add_model(lm_model)\n\nfitted_model &lt;- fit(workflow_obj, data = train_data)\nprint(test_data)\n\n#&gt; # A tibble: 1,000 × 18\n#&gt;    order_id order_line order_date          model           model_year category_1\n#&gt;       &lt;dbl&gt;      &lt;dbl&gt; &lt;dttm&gt;              &lt;chr&gt;                &lt;dbl&gt; &lt;chr&gt;     \n#&gt;  1     1762          8 2019-06-11 00:00:00 Aeroad CF SL 7…       2021 Road      \n#&gt;  2     1762          9 2019-06-11 00:00:00 Torque CF 9.0         2019 Mountain  \n#&gt;  3     1762         10 2019-06-11 00:00:00 Neuron:ON WMN …       2020 E-Bikes   \n#&gt;  4     1762         11 2019-06-11 00:00:00 Roadlite 5 WMN        2021 Hybrid / …\n#&gt;  5     1762         12 2019-06-11 00:00:00 Ultimate CF SL…       2020 Road      \n#&gt;  6     1762         13 2019-06-11 00:00:00 Torque CF 9.0         2019 Mountain  \n#&gt;  7     1762         14 2019-06-11 00:00:00 Grail CF SL 8 …       2021 Gravel    \n#&gt;  8     1762         15 2019-06-11 00:00:00 Inflite CF SLX…       2020 Road      \n#&gt;  9     1762         16 2019-06-11 00:00:00 Neuron CF 9 SL        2021 Mountain  \n#&gt; 10     1762         17 2019-06-11 00:00:00 Ultimate WMN C…       2020 Road      \n#&gt; # ℹ 990 more rows\n#&gt; # ℹ 12 more variables: category_2 &lt;chr&gt;, category_3 &lt;chr&gt;, price &lt;dbl&gt;,\n#&gt; #   quantity &lt;dbl&gt;, total_price &lt;dbl&gt;, frame_material &lt;chr&gt;, weight &lt;dbl&gt;,\n#&gt; #   url &lt;chr&gt;, bikeshop &lt;chr&gt;, location &lt;chr&gt;, lat &lt;dbl&gt;, lng &lt;dbl&gt;\n\n  predict( fitted_model, new_data = test_data) %&gt;%\n\n    bind_cols(test_data %&gt;% select(total_price))%&gt;%\n    \n    \n    yardstick::metrics(truth = total_price, estimate = .pred)\n\n\n\n  \n\n\n\n#e\nend"
  },
  {
    "objectID": "content/01_journal/07_chall_3.html",
    "href": "content/01_journal/07_chall_3.html",
    "title": "chall 3",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readxl)\nlibrary(skimr)\nlibrary(GGally)\n\nlibrary(h2o)\n\nemployee_attrition_tbl &lt;- read_csv(\"datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.txt\")\n\npath_data_definitions &lt;- \"data_definitions.xlsx\"\ndefinitions_raw_tbl   &lt;- read_excel(path_data_definitions, sheet = 1, col_names = FALSE)\n\nplot_ggpairs &lt;- function(data, color = NULL, density_alpha = 0.5) {\n  \n  color_expr &lt;- enquo(color)\n  \n  if (rlang::quo_is_null(color_expr)) {\n    \n    g &lt;- data %&gt;%\n      ggpairs(lower = \"blank\") \n    \n  } else {\n    \n    color_name &lt;- quo_name(color_expr)\n    \n    g &lt;- data %&gt;%\n      ggpairs(mapping = aes_string(color = color_name), \n              lower = \"blank\", legend = 1,\n              diag = list(continuous = wrap(\"densityDiag\", \n                                            alpha = density_alpha))) +\n      theme(legend.position = \"bottom\")\n  }\n  \n  \n  return(g)\n  \n}\n\nscatter_plot &lt;- function(data, x_var, y_var) {\n  \n  x_var &lt;- enquo(x_var)\n  y_var &lt;- enquo(y_var)\n  \n  ret &lt;- data %&gt;% \n           ggplot(aes(x = !!x_var, y = !!y_var)) + \n           geom_point() + \n           geom_smooth() +\n           ggtitle(str_c(as_label(y_var), \" vs. \",as_label(x_var)))\n \n  return(ret)\n}"
  },
  {
    "objectID": "content/01_journal/07_chall_3.html#questions",
    "href": "content/01_journal/07_chall_3.html#questions",
    "title": "chall 3",
    "section": "\n1 Questions",
    "text": "1 Questions\n1\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition, MonthlyIncome) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nAnswer: c.\n2\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition, PercentSalaryHike) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nvery similar\nAnswer: d.\nQuestio 3\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition, StockOptionLevel) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nAswer: c.\n4\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition, EnvironmentSatisfaction) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nAnswer: a.\n5\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition, WorkLifeBalance) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nAnswer: b. \n6\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition, JobInvolvement) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nAnswer: a.\n7\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition, OverTime) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nAnswer: b. \n8\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition, TrainingTimesLastYear, Education) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nAnswer: b.\n9\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition, YearsAtCompany) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nAnswer: b.\n10\n\nemployee_attrition_tbl %&gt;%\n  select(Attrition, YearsSinceLastPromotion) %&gt;%\n  plot_ggpairs(Attrition)\n\n\n\n\n\n\n\nvery sim\nAnswer: c."
  },
  {
    "objectID": "content/01_journal/08_chall_4.html",
    "href": "content/01_journal/08_chall_4.html",
    "title": "chall 3",
    "section": "",
    "text": "Steps\n##1\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(skimr)\nlibrary(GGally)\nlibrary(rsample)\nlibrary(recipes)\nlibrary(h2o)\nh2o.init()\n\n#&gt;  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         4 days 16 hours \n#&gt;     H2O cluster timezone:       +01:00 \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.40.0.4 \n#&gt;     H2O cluster version age:    1 month and 6 days \n#&gt;     H2O cluster name:           H2O_started_from_R_ehsan_yjp144 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   1.59 GB \n#&gt;     H2O cluster total cores:    4 \n#&gt;     H2O cluster allowed cores:  4 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\nurl &lt;- \"https://raw.githubusercontent.com/TUHHStartupEngineers/dat_sci_ss20/master/10/product_backorders.csv\"\n\nproduct_backorders_tbl &lt;-  read.csv(url)"
  },
  {
    "objectID": "content/01_journal/08_chall_4.html#section",
    "href": "content/01_journal/08_chall_4.html#section",
    "title": "chall 3",
    "section": "\n1 2",
    "text": "1 2\n\nset.seed(seed = 1113)\nsplit_obj &lt;- rsample::initial_split(product_backorders_tbl, prop = 0.85)\npb_train_tbl &lt;- training(split_obj)\npb_test_tbl &lt;- testing(split_obj)\n\nrecipe_obj &lt;- recipe(went_on_backorder ~ ., data = pb_train_tbl) %&gt;% \n  step_zv(all_predictors()) %&gt;% \n  prep()\n\ntrain_tbl &lt;- bake(recipe_obj, new_data = pb_train_tbl)\ntest_tbl  &lt;- bake(recipe_obj, new_data = pb_test_tbl)\n\nsplit_h2o &lt;- h2o.splitFrame(as.h2o(train_tbl), ratios = c(0.85), seed = 1234)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntrain_h2o &lt;- split_h2o[[1]]\nvalid_h2o &lt;- split_h2o[[2]]\ntest_h2o  &lt;- as.h2o(test_tbl)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ny &lt;- \"went_on_backorder\"\nx &lt;- setdiff(names(train_h2o), y)\n\nmodel &lt;- h2o.glm(y = y, x = x, training_frame = train_h2o, validation_frame = valid_h2o)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%"
  },
  {
    "objectID": "content/01_journal/08_chall_4.html#section-1",
    "href": "content/01_journal/08_chall_4.html#section-1",
    "title": "chall 3",
    "section": "\n2 3",
    "text": "2 3\n\nautoml_models_h2o &lt;- h2o.automl(\n  x = x,\n  y = y,\n  training_frame    = train_h2o,\n  validation_frame  = valid_h2o,\n  leaderboard_frame = test_h2o,\n  max_runtime_secs  = 140,\n  nfolds            = 5 \n)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |=                                                                     |   1%\n#&gt; 15:16:52.745: User specified a validation frame with cross-validation still enabled. Please note that the models will still be validated using cross-validation only, the validation frame will be used to provide purely informative validation metrics on the trained models.\n#&gt; 15:16:52.749: AutoML: XGBoost is not available; skipping it.\n  |                                                                            \n  |==                                                                    |   3%\n  |                                                                            \n  |=====                                                                 |   7%\n  |                                                                            \n  |=======                                                               |  10%\n  |                                                                            \n  |========                                                              |  11%\n  |                                                                            \n  |=========                                                             |  13%\n  |                                                                            \n  |==========                                                            |  15%\n  |                                                                            \n  |=============                                                         |  19%\n  |                                                                            \n  |==============                                                        |  21%\n  |                                                                            \n  |=================                                                     |  25%\n  |                                                                            \n  |==================                                                    |  26%\n  |                                                                            \n  |=====================                                                 |  31%\n  |                                                                            \n  |======================                                                |  32%\n  |                                                                            \n  |=========================                                             |  36%\n  |                                                                            \n  |==========================                                            |  38%\n  |                                                                            \n  |============================                                          |  40%\n  |                                                                            \n  |==============================                                        |  43%\n  |                                                                            \n  |==================================                                    |  48%\n  |                                                                            \n  |===================================                                   |  49%\n  |                                                                            \n  |====================================                                  |  51%\n  |                                                                            \n  |======================================                                |  54%\n  |                                                                            \n  |=======================================                               |  56%\n  |                                                                            \n  |=========================================                             |  58%\n  |                                                                            \n  |===========================================                           |  61%\n  |                                                                            \n  |============================================                          |  63%\n  |                                                                            \n  |=============================================                         |  64%\n  |                                                                            \n  |==============================================                        |  66%\n  |                                                                            \n  |=================================================                     |  70%\n  |                                                                            \n  |==================================================                    |  71%\n  |                                                                            \n  |=====================================================                 |  75%\n  |                                                                            \n  |======================================================                |  77%\n  |                                                                            \n  |=========================================================             |  81%\n  |                                                                            \n  |==========================================================            |  83%\n  |                                                                            \n  |===========================================================           |  85%\n  |                                                                            \n  |============================================================          |  86%\n  |                                                                            \n  |================================================================      |  91%\n  |                                                                            \n  |===================================================================   |  96%\n  |                                                                            \n  |====================================================================  |  97%\n  |                                                                            \n  |===================================================================== |  99%\n  |                                                                            \n  |======================================================================| 100%"
  },
  {
    "objectID": "content/01_journal/08_chall_4.html#section-2",
    "href": "content/01_journal/08_chall_4.html#section-2",
    "title": "chall 3",
    "section": "\n3 4",
    "text": "3 4\n\nautoml_models_h2o@leaderboard\n\n#&gt;                                                  model_id       auc   logloss\n#&gt; 1 StackedEnsemble_BestOfFamily_2_AutoML_4_20230603_151652 0.9520071 0.1726595\n#&gt; 2    StackedEnsemble_AllModels_3_AutoML_4_20230603_151652 0.9516730 0.1767681\n#&gt; 3 StackedEnsemble_BestOfFamily_3_AutoML_4_20230603_151652 0.9513301 0.1732281\n#&gt; 4    StackedEnsemble_AllModels_1_AutoML_4_20230603_151652 0.9512862 0.1726244\n#&gt; 5    StackedEnsemble_AllModels_2_AutoML_4_20230603_151652 0.9508323 0.1732376\n#&gt; 6                          GBM_3_AutoML_4_20230603_151652 0.9499870 0.1778902\n#&gt;       aucpr mean_per_class_error      rmse        mse\n#&gt; 1 0.7530147            0.1429298 0.2285787 0.05224824\n#&gt; 2 0.7532850            0.1337649 0.2286841 0.05229642\n#&gt; 3 0.7503362            0.1462346 0.2284625 0.05219513\n#&gt; 4 0.7565722            0.1604943 0.2281655 0.05205951\n#&gt; 5 0.7544911            0.1565316 0.2283133 0.05212697\n#&gt; 6 0.7358947            0.1265125 0.2315957 0.05363657\n#&gt; \n#&gt; [22 rows x 7 columns]"
  },
  {
    "objectID": "content/01_journal/08_chall_4.html#section-3",
    "href": "content/01_journal/08_chall_4.html#section-3",
    "title": "chall 3",
    "section": "\n4 5",
    "text": "4 5\n\nleader_model &lt;- automl_models_h2o@leader\n\npredictions &lt;- h2o.predict(object = leader_model, newdata = test_h2o)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\npredictions_tbl &lt;- predictions %&gt;% as_tibble()\n\npredictions_tbl"
  },
  {
    "objectID": "content/01_journal/08_chall_4.html#section-4",
    "href": "content/01_journal/08_chall_4.html#section-4",
    "title": "chall 3",
    "section": "\n5 6",
    "text": "5 6"
  },
  {
    "objectID": "content/01_journal/09_chall_5.html",
    "href": "content/01_journal/09_chall_5.html",
    "title": "chall 3",
    "section": "",
    "text": "library(tidyverse)\nlibrary(readxl)\nlibrary(skimr)\nlibrary(GGally)\nlibrary(rsample)\nlibrary(recipes)\n\n#H2O modeling\nlibrary(h2o)\n\nh2o.init()\n\n#&gt;  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         4 days 17 hours \n#&gt;     H2O cluster timezone:       +01:00 \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.40.0.4 \n#&gt;     H2O cluster version age:    1 month and 6 days \n#&gt;     H2O cluster name:           H2O_started_from_R_ehsan_yjp144 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   1.53 GB \n#&gt;     H2O cluster total cores:    4 \n#&gt;     H2O cluster allowed cores:  4 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\nautoml_models_h2o &lt;- readRDS(\"save_dat/challenge_automl_models_h2o\")\ntrain_tbl &lt;- readRDS(\"save_dat/train_tbl\")\ntest_tbl &lt;- readRDS(\"save_dat/test_tbl\")\n\nvalid_h2o &lt;- readRDS(\"save_dat/valid_h2o\")\ntrain_h2o &lt;- readRDS(\"save_dat/train_h2o\")\ntest_h2o &lt;- readRDS(\"save_dat/test_h2o\")\npredictions_tbl&lt;- readRDS(\"save_dat/predictions_tbl\")\n\n\nautoml_models_h2o@leaderboard %&gt;% \n              as_tibble() %&gt;% \n              select(-c(mean_per_class_error, rmse, mse))\n\n\n\n  \n\n\ndata_transformed_tbl &lt;- automl_models_h2o@leaderboard %&gt;%\n        as_tibble() %&gt;%\n        select(-c(aucpr, mean_per_class_error, rmse, mse)) %&gt;% \n        mutate(model_type = str_extract(model_id, \"[^_]+\")) %&gt;%\n        slice(1:15) %&gt;% \n        rownames_to_column(var = \"rowname\") %&gt;%\n        # Visually this step will not change anything\n        # It reorders the factors under the hood\n        mutate(\n          model_id   = as_factor(model_id) %&gt;% reorder(auc),\n          model_type = as.factor(model_type)\n          ) %&gt;% \n          pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       ) %&gt;% \n        mutate(model_id = paste0(rowname, \". \", model_id) %&gt;% as_factor() %&gt;% fct_rev())\n\ndata_transformed_tbl %&gt;%\n        ggplot(aes(value, model_id, color = model_type)) +\n        geom_point(size = 3) +\n        geom_label(aes(label = round(value, 2), hjust = \"inward\")) +\n        \n        # Facet to break out logloss and auc\n        facet_wrap(~ key, scales = \"free_x\") +\n        labs(title = \"Leaderboard Metrics\",\n             subtitle = paste0(\"Ordered by: \", \"auc\"),\n             y = \"Model Postion, Model ID\", x = \"\") + \n        theme(legend.position = \"bottom\")\n\n\n\n\n\n\nplot_h2o_leaderboard &lt;- function(h2o_leaderboard, order_by = c(\"auc\", \"logloss\"), \n                                 n_max = 20, size = 4, include_lbl = TRUE) {\n\n    # Setup inputs\n    # adjust input so that all formats are working\n    order_by &lt;- tolower(order_by[[1]])\n\n    leaderboard_tbl &lt;- h2o_leaderboard %&gt;%\n        as.tibble() %&gt;%\n        select(-c(aucpr, mean_per_class_error, rmse, mse)) %&gt;% \n        mutate(model_type = str_extract(model_id, \"[^_]+\")) %&gt;%\n        rownames_to_column(var = \"rowname\") %&gt;%\n        mutate(model_id = paste0(rowname, \". \", model_id) %&gt;% as.factor())\n\n    # Transformation\n    if (order_by == \"auc\") {\n\n        data_transformed_tbl &lt;- leaderboard_tbl %&gt;%\n            slice(1:n_max) %&gt;%\n            mutate(\n                model_id   = as_factor(model_id) %&gt;% reorder(auc),\n                model_type = as.factor(model_type)\n            ) %&gt;%\n                pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       )\n\n    } else if (order_by == \"logloss\") {\n\n        data_transformed_tbl &lt;- leaderboard_tbl %&gt;%\n            slice(1:n_max) %&gt;%\n            mutate(\n                model_id   = as_factor(model_id) %&gt;% reorder(logloss) %&gt;% fct_rev(),\n                model_type = as.factor(model_type)\n            ) %&gt;%\n            pivot_longer(cols = -c(model_id, model_type, rowname), \n                       names_to = \"key\", \n                       values_to = \"value\", \n                       names_transform = list(key = forcats::fct_inorder)\n                       )\n\n    } else {\n        # If nothing is supplied\n        stop(paste0(\"order_by = '\", order_by, \"' is not a permitted option.\"))\n    }\n\n    # Visualization\n    g &lt;- data_transformed_tbl %&gt;%\n        ggplot(aes(value, model_id, color = model_type)) +\n        geom_point(size = size) +\n        facet_wrap(~ key, scales = \"free_x\") +\n        labs(title = \"Leaderboard Metrics\",\n             subtitle = paste0(\"Ordered by: \", toupper(order_by)),\n             y = \"Model Postion, Model ID\", x = \"\")\n\n    if (include_lbl) g &lt;- g + geom_label(aes(label = round(value, 2), \n                                             hjust = \"inward\"))\n\n    return(g)\n\n}\n\nplot_h2o_leaderboard \n\n#&gt; function(h2o_leaderboard, order_by = c(\"auc\", \"logloss\"), \n#&gt;                                  n_max = 20, size = 4, include_lbl = TRUE) {\n#&gt; \n#&gt;     # Setup inputs\n#&gt;     # adjust input so that all formats are working\n#&gt;     order_by &lt;- tolower(order_by[[1]])\n#&gt; \n#&gt;     leaderboard_tbl &lt;- h2o_leaderboard %&gt;%\n#&gt;         as.tibble() %&gt;%\n#&gt;         select(-c(aucpr, mean_per_class_error, rmse, mse)) %&gt;% \n#&gt;         mutate(model_type = str_extract(model_id, \"[^_]+\")) %&gt;%\n#&gt;         rownames_to_column(var = \"rowname\") %&gt;%\n#&gt;         mutate(model_id = paste0(rowname, \". \", model_id) %&gt;% as.factor())\n#&gt; \n#&gt;     # Transformation\n#&gt;     if (order_by == \"auc\") {\n#&gt; \n#&gt;         data_transformed_tbl &lt;- leaderboard_tbl %&gt;%\n#&gt;             slice(1:n_max) %&gt;%\n#&gt;             mutate(\n#&gt;                 model_id   = as_factor(model_id) %&gt;% reorder(auc),\n#&gt;                 model_type = as.factor(model_type)\n#&gt;             ) %&gt;%\n#&gt;                 pivot_longer(cols = -c(model_id, model_type, rowname), \n#&gt;                        names_to = \"key\", \n#&gt;                        values_to = \"value\", \n#&gt;                        names_transform = list(key = forcats::fct_inorder)\n#&gt;                        )\n#&gt; \n#&gt;     } else if (order_by == \"logloss\") {\n#&gt; \n#&gt;         data_transformed_tbl &lt;- leaderboard_tbl %&gt;%\n#&gt;             slice(1:n_max) %&gt;%\n#&gt;             mutate(\n#&gt;                 model_id   = as_factor(model_id) %&gt;% reorder(logloss) %&gt;% fct_rev(),\n#&gt;                 model_type = as.factor(model_type)\n#&gt;             ) %&gt;%\n#&gt;             pivot_longer(cols = -c(model_id, model_type, rowname), \n#&gt;                        names_to = \"key\", \n#&gt;                        values_to = \"value\", \n#&gt;                        names_transform = list(key = forcats::fct_inorder)\n#&gt;                        )\n#&gt; \n#&gt;     } else {\n#&gt;         # If nothing is supplied\n#&gt;         stop(paste0(\"order_by = '\", order_by, \"' is not a permitted option.\"))\n#&gt;     }\n#&gt; \n#&gt;     # Visualization\n#&gt;     g &lt;- data_transformed_tbl %&gt;%\n#&gt;         ggplot(aes(value, model_id, color = model_type)) +\n#&gt;         geom_point(size = size) +\n#&gt;         facet_wrap(~ key, scales = \"free_x\") +\n#&gt;         labs(title = \"Leaderboard Metrics\",\n#&gt;              subtitle = paste0(\"Ordered by: \", toupper(order_by)),\n#&gt;              y = \"Model Postion, Model ID\", x = \"\")\n#&gt; \n#&gt;     if (include_lbl) g &lt;- g + geom_label(aes(label = round(value, 2), \n#&gt;                                              hjust = \"inward\"))\n#&gt; \n#&gt;     return(g)\n#&gt; \n#&gt; }\n\nplot_h2o_leaderboard(automl_models_h2o@leaderboard, \"auc\")\n\n#&gt; Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#&gt; ℹ Please use `as_tibble()` instead.\n#&gt; ℹ The signature and semantics have changed, see `?as_tibble`.\n\n\n\n\n\n\n\nplot_h2o_leaderboard(automl_models_h2o@leaderboard, \"logloss\")\n\n\n\n\n\n\ndeeplearning_h2o &lt;- h2o.getModel(\"StackedEnsemble_BestOfFamily_3_AutoML_3_20230531_140706\")\n\n\n# Take a look for the metrics on the training data set\n# For my model the total error in the confusion matrix is ~15 %\ndeeplearning_h2o\n\n#&gt; Model Details:\n#&gt; ==============\n#&gt; \n#&gt; H2OBinomialModel: stackedensemble\n#&gt; Model ID:  StackedEnsemble_BestOfFamily_3_AutoML_3_20230531_140706 \n#&gt; Model Summary for Stacked Ensemble: \n#&gt;                                          key            value\n#&gt; 1                          Stacking strategy cross_validation\n#&gt; 2       Number of base models (used / total)              4/5\n#&gt; 3           # GBM base models (used / total)              1/1\n#&gt; 4           # DRF base models (used / total)              2/2\n#&gt; 5  # DeepLearning base models (used / total)              0/1\n#&gt; 6           # GLM base models (used / total)              1/1\n#&gt; 7                      Metalearner algorithm              GLM\n#&gt; 8         Metalearner fold assignment scheme           Random\n#&gt; 9                         Metalearner nfolds                5\n#&gt; 10                   Metalearner fold_column               NA\n#&gt; 11        Custom metalearner hyperparameters             None\n#&gt; \n#&gt; \n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on training data. **\n#&gt; \n#&gt; MSE:  0.02095148\n#&gt; RMSE:  0.1447463\n#&gt; LogLoss:  0.08356129\n#&gt; Mean Per-Class Error:  0.0692645\n#&gt; AUC:  0.9937042\n#&gt; AUCPR:  0.9651011\n#&gt; Gini:  0.9874084\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No  Yes    Error       Rate\n#&gt; No     8714   74 0.008421   =74/8788\n#&gt; Yes     156 1043 0.130108  =156/1199\n#&gt; Totals 8870 1117 0.023030  =230/9987\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.488631    0.900691 158\n#&gt; 2                       max f2  0.340765    0.914146 196\n#&gt; 3                 max f0point5  0.619377    0.929317 127\n#&gt; 4                 max accuracy  0.499542    0.976970 155\n#&gt; 5                max precision  0.991956    1.000000   0\n#&gt; 6                   max recall  0.028239    1.000000 341\n#&gt; 7              max specificity  0.991956    1.000000   0\n#&gt; 8             max absolute_mcc  0.488631    0.888397 158\n#&gt; 9   max min_per_class_accuracy  0.239365    0.957328 228\n#&gt; 10 max mean_per_class_accuracy  0.218740    0.958589 235\n#&gt; 11                     max tns  0.991956 8788.000000   0\n#&gt; 12                     max fns  0.991956 1197.000000   0\n#&gt; 13                     max fps  0.000068 8788.000000 399\n#&gt; 14                     max tps  0.028239 1199.000000 341\n#&gt; 15                     max tnr  0.991956    1.000000   0\n#&gt; 16                     max fnr  0.991956    0.998332   0\n#&gt; 17                     max fpr  0.000068    1.000000 399\n#&gt; 18                     max tpr  0.028239    1.000000 341\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on validation data. **\n#&gt; \n#&gt; MSE:  0.0483484\n#&gt; RMSE:  0.2198827\n#&gt; LogLoss:  0.163083\n#&gt; Mean Per-Class Error:  0.1262552\n#&gt; AUC:  0.9544881\n#&gt; AUCPR:  0.7742703\n#&gt; Gini:  0.9089762\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No Yes    Error       Rate\n#&gt; No     1995 109 0.051806  =109/2104\n#&gt; Yes      57 227 0.200704    =57/284\n#&gt; Totals 2052 336 0.069514  =166/2388\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.267235    0.732258 202\n#&gt; 2                       max f2  0.140089    0.806148 254\n#&gt; 3                 max f0point5  0.575428    0.740909 121\n#&gt; 4                 max accuracy  0.409730    0.934255 160\n#&gt; 5                max precision  0.980007    1.000000   0\n#&gt; 6                   max recall  0.005990    1.000000 381\n#&gt; 7              max specificity  0.980007    1.000000   0\n#&gt; 8             max absolute_mcc  0.267235    0.695871 202\n#&gt; 9   max min_per_class_accuracy  0.140089    0.904468 254\n#&gt; 10 max mean_per_class_accuracy  0.140089    0.904699 254\n#&gt; 11                     max tns  0.980007 2104.000000   0\n#&gt; 12                     max fns  0.980007  283.000000   0\n#&gt; 13                     max fps  0.000084 2104.000000 399\n#&gt; 14                     max tps  0.005990  284.000000 381\n#&gt; 15                     max tnr  0.980007    1.000000   0\n#&gt; 16                     max fnr  0.980007    0.996479   0\n#&gt; 17                     max fpr  0.000084    1.000000 399\n#&gt; 18                     max tpr  0.005990    1.000000 381\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on cross-validation data. **\n#&gt; ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#&gt; \n#&gt; MSE:  0.05020629\n#&gt; RMSE:  0.2240676\n#&gt; LogLoss:  0.1696114\n#&gt; Mean Per-Class Error:  0.1638767\n#&gt; AUC:  0.9526691\n#&gt; AUCPR:  0.745631\n#&gt; Gini:  0.9053383\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;           No  Yes    Error        Rate\n#&gt; No     11702  467 0.038376  =467/12169\n#&gt; Yes      474 1164 0.289377   =474/1638\n#&gt; Totals 12176 1631 0.068154  =941/13807\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold        value idx\n#&gt; 1                       max f1  0.403807     0.712144 181\n#&gt; 2                       max f2  0.128243     0.777216 281\n#&gt; 3                 max f0point5  0.630520     0.733814 116\n#&gt; 4                 max accuracy  0.441147     0.932208 171\n#&gt; 5                max precision  0.999530     1.000000   0\n#&gt; 6                   max recall  0.000116     1.000000 399\n#&gt; 7              max specificity  0.999530     1.000000   0\n#&gt; 8             max absolute_mcc  0.403807     0.673494 181\n#&gt; 9   max min_per_class_accuracy  0.118251     0.886844 286\n#&gt; 10 max mean_per_class_accuracy  0.115070     0.887960 288\n#&gt; 11                     max tns  0.999530 12169.000000   0\n#&gt; 12                     max fns  0.999530  1637.000000   0\n#&gt; 13                     max fps  0.000116 12169.000000 399\n#&gt; 14                     max tps  0.000116  1638.000000 399\n#&gt; 15                     max tnr  0.999530     1.000000   0\n#&gt; 16                     max fnr  0.999530     0.999389   0\n#&gt; 17                     max fpr  0.000116     1.000000 399\n#&gt; 18                     max tpr  0.000116     1.000000 399\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; Cross-Validation Metrics Summary: \n#&gt;                 mean        sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#&gt; accuracy    0.931651  0.008469   0.932049   0.921090   0.926019   0.936485\n#&gt; auc         0.952834  0.006053   0.943348   0.950494   0.958377   0.955392\n#&gt; err         0.068349  0.008469   0.067951   0.078910   0.073981   0.063516\n#&gt; err_count 188.800000 24.242525 187.000000 220.000000 205.000000 172.000000\n#&gt; f0point5    0.711123  0.043472   0.691824   0.676906   0.679790   0.726765\n#&gt;           cv_5_valid\n#&gt; accuracy    0.942611\n#&gt; auc         0.956557\n#&gt; err         0.057389\n#&gt; err_count 160.000000\n#&gt; f0point5    0.780330\n#&gt; \n#&gt; ---\n#&gt;                         mean        sd cv_1_valid  cv_2_valid cv_3_valid\n#&gt; precision           0.708788  0.054534   0.685358    0.672316   0.657360\n#&gt; r2                  0.519374  0.029653   0.503006    0.484363   0.525844\n#&gt; recall              0.725641  0.043487   0.718954    0.695906   0.787234\n#&gt; residual_deviance 934.312260 47.848198 945.647950 1007.256700 909.544740\n#&gt; rmse                0.223902  0.006644   0.221624    0.235570   0.222738\n#&gt; specificity         0.959285  0.011149   0.958708    0.952576   0.944717\n#&gt;                   cv_4_valid cv_5_valid\n#&gt; precision           0.740213   0.788690\n#&gt; r2                  0.519771   0.563887\n#&gt; recall              0.677524   0.748588\n#&gt; residual_deviance 878.825600 930.286130\n#&gt; rmse                0.219705   0.219871\n#&gt; specificity         0.969596   0.970830\n\n# We want to see how it performs for the testing data frame\ntest_tbl\n\n\n\n  \n\n\n# Make sure to convert it to an h20 object\n# Accuracy of the confusion matrix shows ~85 % accuracy\nh2o.performance(deeplearning_h2o, newdata = as.h2o(test_tbl))\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; \n#&gt; MSE:  0.05185423\n#&gt; RMSE:  0.2277152\n#&gt; LogLoss:  0.1720588\n#&gt; Mean Per-Class Error:  0.1500597\n#&gt; AUC:  0.9517568\n#&gt; AUCPR:  0.7577467\n#&gt; Gini:  0.9035136\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No Yes    Error       Rate\n#&gt; No     2388 126 0.050119  =126/2514\n#&gt; Yes      86 258 0.250000    =86/344\n#&gt; Totals 2474 384 0.074178  =212/2858\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.302412    0.708791 191\n#&gt; 2                       max f2  0.127479    0.783101 263\n#&gt; 3                 max f0point5  0.653392    0.736532 100\n#&gt; 4                 max accuracy  0.382415    0.930021 169\n#&gt; 5                max precision  0.981480    1.000000   0\n#&gt; 6                   max recall  0.005811    1.000000 381\n#&gt; 7              max specificity  0.981480    1.000000   0\n#&gt; 8             max absolute_mcc  0.382415    0.668697 169\n#&gt; 9   max min_per_class_accuracy  0.115119    0.887828 270\n#&gt; 10 max mean_per_class_accuracy  0.109444    0.890196 273\n#&gt; 11                     max tns  0.981480 2514.000000   0\n#&gt; 12                     max fns  0.981480  343.000000   0\n#&gt; 13                     max fps  0.000138 2514.000000 399\n#&gt; 14                     max tps  0.005811  344.000000 381\n#&gt; 15                     max tnr  0.981480    1.000000   0\n#&gt; 16                     max fnr  0.981480    0.997093   0\n#&gt; 17                     max fpr  0.000138    1.000000 399\n#&gt; 18                     max tpr  0.005811    1.000000 381\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n\n\n\nh2o.init()\n\n#&gt;  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         4 days 17 hours \n#&gt;     H2O cluster timezone:       +01:00 \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.40.0.4 \n#&gt;     H2O cluster version age:    1 month and 6 days \n#&gt;     H2O cluster name:           H2O_started_from_R_ehsan_yjp144 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   1.55 GB \n#&gt;     H2O cluster total cores:    4 \n#&gt;     H2O cluster allowed cores:  4 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\ny &lt;- \"went_on_backorder\"\nx &lt;- setdiff(names(train_h2o), y)\ndeeplearning_grid_01 &lt;- h2o.grid(\n\n    # See help page for available algos\n    algorithm = \"deeplearning\",\n    \n    # I just use the same as the object\n    grid_id = \"deeplearning_grid_01\",\n    \n    # The following is for ?h2o.deeplearning()\n    # predictor and response variables\n    x = x,\n    y = y,\n    \n    # training and validation frame and crossfold validation\n    training_frame   = train_h2o,\n    validation_frame = valid_h2o,\n    nfolds = 5,\n    \n    # Hyperparamters: Use deeplearning_h2o@allparameters to see all\n    hyper_params = list(\n        # Use some combinations (the first one was the original)\n        hidden = list(c(10, 10, 10), c(50, 20, 10), c(20, 20, 20)),\n        epochs = c(10, 50, 100)\n    )\n)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n\ndeeplearning_grid_01\n\n#&gt; H2O Grid Details\n#&gt; ================\n#&gt; \n#&gt; Grid ID: deeplearning_grid_01 \n#&gt; Used hyper parameters: \n#&gt;   -  epochs \n#&gt;   -  hidden \n#&gt; Number of models: 9 \n#&gt; Number of failed models: 0 \n#&gt; \n#&gt; Hyper-Parameter Search Summary: ordered by increasing logloss\n#&gt;      epochs       hidden                    model_ids logloss\n#&gt; 1 101.36926 [20, 20, 20] deeplearning_grid_01_model_9 0.24044\n#&gt; 2 101.40929 [10, 10, 10] deeplearning_grid_01_model_3 0.24121\n#&gt; 3  52.00603 [20, 20, 20] deeplearning_grid_01_model_8 0.24637\n#&gt; 4  52.00824 [10, 10, 10] deeplearning_grid_01_model_2 0.25377\n#&gt; 5 101.41876 [50, 20, 10] deeplearning_grid_01_model_6 0.25386\n#&gt; 6  52.01486 [50, 20, 10] deeplearning_grid_01_model_5 0.25510\n#&gt; 7  10.39465 [50, 20, 10] deeplearning_grid_01_model_4 0.29263\n#&gt; 8  10.41594 [20, 20, 20] deeplearning_grid_01_model_7 0.29814\n#&gt; 9  10.40125 [10, 10, 10] deeplearning_grid_01_model_1 0.31324\n\n\n\nh2o.getGrid(grid_id = \"deeplearning_grid_01\", sort_by = \"auc\", decreasing = TRUE)\n\n#&gt; H2O Grid Details\n#&gt; ================\n#&gt; \n#&gt; Grid ID: deeplearning_grid_01 \n#&gt; Used hyper parameters: \n#&gt;   -  epochs \n#&gt;   -  hidden \n#&gt; Number of models: 9 \n#&gt; Number of failed models: 0 \n#&gt; \n#&gt; Hyper-Parameter Search Summary: ordered by decreasing auc\n#&gt;      epochs       hidden                    model_ids     auc\n#&gt; 1 101.40929 [10, 10, 10] deeplearning_grid_01_model_3 0.90273\n#&gt; 2 101.36926 [20, 20, 20] deeplearning_grid_01_model_9 0.90032\n#&gt; 3 101.41876 [50, 20, 10] deeplearning_grid_01_model_6 0.89889\n#&gt; 4  52.00824 [10, 10, 10] deeplearning_grid_01_model_2 0.89200\n#&gt; 5  52.00603 [20, 20, 20] deeplearning_grid_01_model_8 0.89129\n#&gt; 6  52.01486 [50, 20, 10] deeplearning_grid_01_model_5 0.88213\n#&gt; 7  10.39465 [50, 20, 10] deeplearning_grid_01_model_4 0.81364\n#&gt; 8  10.41594 [20, 20, 20] deeplearning_grid_01_model_7 0.80180\n#&gt; 9  10.40125 [10, 10, 10] deeplearning_grid_01_model_1 0.78642\n\n\n\ndeeplearning_grid_01_model_1 &lt;- h2o.getModel(\"deeplearning_grid_01_model_3\")\n\ndeeplearning_grid_01_model_1 %&gt;% h2o.auc(train = T, valid = T, xval = T)\n\n#&gt;     train     valid      xval \n#&gt; 0.9219117 0.9055689 0.9027253\n\n# Run it on the test data\ndeeplearning_grid_01_model_1 %&gt;%\n    h2o.performance(newdata = as.h2o(test_tbl))\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n#&gt; H2OBinomialMetrics: deeplearning\n#&gt; \n#&gt; MSE:  0.06957678\n#&gt; RMSE:  0.2637741\n#&gt; LogLoss:  0.2648886\n#&gt; Mean Per-Class Error:  0.2306595\n#&gt; AUC:  0.8957905\n#&gt; AUCPR:  0.5832354\n#&gt; Gini:  0.7915811\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;          No Yes    Error       Rate\n#&gt; No     2392 122 0.048528  =122/2514\n#&gt; Yes     142 202 0.412791   =142/344\n#&gt; Totals 2534 324 0.092372  =264/2858\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.472300    0.604790 138\n#&gt; 2                       max f2  0.179373    0.677108 257\n#&gt; 3                 max f0point5  0.576583    0.647541 102\n#&gt; 4                 max accuracy  0.527036    0.914276 120\n#&gt; 5                max precision  0.910948    0.800000   9\n#&gt; 6                   max recall  0.000032    1.000000 399\n#&gt; 7              max specificity  1.000000    0.999602   0\n#&gt; 8             max absolute_mcc  0.527036    0.561190 120\n#&gt; 9   max min_per_class_accuracy  0.169172    0.822674 262\n#&gt; 10 max mean_per_class_accuracy  0.179373    0.825296 257\n#&gt; 11                     max tns  1.000000 2513.000000   0\n#&gt; 12                     max fns  1.000000  344.000000   0\n#&gt; 13                     max fps  0.000032 2514.000000 399\n#&gt; 14                     max tps  0.000032  344.000000 399\n#&gt; 15                     max tnr  1.000000    0.999602   0\n#&gt; 16                     max fnr  1.000000    1.000000   0\n#&gt; 17                     max fpr  0.000032    1.000000 399\n#&gt; 18                     max tpr  0.000032    1.000000 399\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n\n\n\nh2o.init()\n\n#&gt;  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         4 days 17 hours \n#&gt;     H2O cluster timezone:       +01:00 \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.40.0.4 \n#&gt;     H2O cluster version age:    1 month and 6 days \n#&gt;     H2O cluster name:           H2O_started_from_R_ehsan_yjp144 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   1.55 GB \n#&gt;     H2O cluster total cores:    4 \n#&gt;     H2O cluster allowed cores:  4 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\nmod_stackedensemble_h2o &lt;- h2o.getModel(\"StackedEnsemble_BestOfFamily_3_AutoML_3_20230531_140706\")\n\nperformance_h2o &lt;- h2o.performance(mod_stackedensemble_h2o, newdata = as.h2o(test_tbl))\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\ntypeof(performance_h2o)\n\n#&gt; [1] \"S4\"\n\nperformance_h2o %&gt;% slotNames()\n\n#&gt; [1] \"algorithm\" \"on_train\"  \"on_valid\"  \"on_xval\"   \"metrics\"\n\n# We are focusing on the slot metrics. This slot contains all possible metrics\nperformance_h2o@metrics\n\n#&gt; $model\n#&gt; $model$`__meta`\n#&gt; $model$`__meta`$schema_version\n#&gt; [1] 3\n#&gt; \n#&gt; $model$`__meta`$schema_name\n#&gt; [1] \"ModelKeyV3\"\n#&gt; \n#&gt; $model$`__meta`$schema_type\n#&gt; [1] \"Key&lt;Model&gt;\"\n#&gt; \n#&gt; \n#&gt; $model$name\n#&gt; [1] \"StackedEnsemble_BestOfFamily_3_AutoML_3_20230531_140706\"\n#&gt; \n#&gt; $model$type\n#&gt; [1] \"Key&lt;Model&gt;\"\n#&gt; \n#&gt; $model$URL\n#&gt; [1] \"/3/Models/StackedEnsemble_BestOfFamily_3_AutoML_3_20230531_140706\"\n#&gt; \n#&gt; \n#&gt; $model_checksum\n#&gt; [1] \"2125092614605282240\"\n#&gt; \n#&gt; $frame\n#&gt; $frame$name\n#&gt; [1] \"test_tbl_sid_96ff_1\"\n#&gt; \n#&gt; \n#&gt; $frame_checksum\n#&gt; [1] \"3640202731845511794\"\n#&gt; \n#&gt; $description\n#&gt; NULL\n#&gt; \n#&gt; $scoring_time\n#&gt; [1] 1.685804e+12\n#&gt; \n#&gt; $predictions\n#&gt; NULL\n#&gt; \n#&gt; $MSE\n#&gt; [1] 0.05185423\n#&gt; \n#&gt; $RMSE\n#&gt; [1] 0.2277152\n#&gt; \n#&gt; $nobs\n#&gt; [1] 2858\n#&gt; \n#&gt; $custom_metric_name\n#&gt; NULL\n#&gt; \n#&gt; $custom_metric_value\n#&gt; [1] 0\n#&gt; \n#&gt; $r2\n#&gt; [1] 0.5102382\n#&gt; \n#&gt; $logloss\n#&gt; [1] 0.1720588\n#&gt; \n#&gt; $AUC\n#&gt; [1] 0.9517568\n#&gt; \n#&gt; $pr_auc\n#&gt; [1] 0.7577467\n#&gt; \n#&gt; $Gini\n#&gt; [1] 0.9035136\n#&gt; \n#&gt; $mean_per_class_error\n#&gt; [1] 0.1500597\n#&gt; \n#&gt; $domain\n#&gt; [1] \"No\"  \"Yes\"\n#&gt; \n#&gt; $cm\n#&gt; $cm$`__meta`\n#&gt; $cm$`__meta`$schema_version\n#&gt; [1] 3\n#&gt; \n#&gt; $cm$`__meta`$schema_name\n#&gt; [1] \"ConfusionMatrixV3\"\n#&gt; \n#&gt; $cm$`__meta`$schema_type\n#&gt; [1] \"ConfusionMatrix\"\n#&gt; \n#&gt; \n#&gt; $cm$table\n#&gt; Confusion Matrix: Row labels: Actual class; Column labels: Predicted class\n#&gt;          No Yes  Error          Rate\n#&gt; No     2388 126 0.0501 = 126 / 2.514\n#&gt; Yes      86 258 0.2500 =    86 / 344\n#&gt; Totals 2474 384 0.0742 = 212 / 2.858\n#&gt; \n#&gt; \n#&gt; $thresholds_and_metric_scores\n#&gt; Metrics for Thresholds: Binomial metrics as a function of classification thresholds\n#&gt;   threshold       f1       f2 f0point5 accuracy precision   recall specificity\n#&gt; 1  0.981480 0.005797 0.003631 0.014368 0.879986  1.000000 0.002907    1.000000\n#&gt; 2  0.972665 0.011561 0.007257 0.028409 0.880336  1.000000 0.005814    1.000000\n#&gt; 3  0.969436 0.017291 0.010877 0.042135 0.880686  1.000000 0.008721    1.000000\n#&gt; 4  0.960552 0.022989 0.014493 0.055556 0.881036  1.000000 0.011628    1.000000\n#&gt; 5  0.958312 0.056497 0.036075 0.130208 0.883135  1.000000 0.029070    1.000000\n#&gt;   absolute_mcc min_per_class_accuracy mean_per_class_accuracy  tns fns fps tps\n#&gt; 1     0.050576               0.002907                0.501453 2514 343   0   1\n#&gt; 2     0.071538               0.005814                0.502907 2514 342   0   2\n#&gt; 3     0.087632               0.008721                0.504360 2514 341   0   3\n#&gt; 4     0.101206               0.011628                0.505814 2514 340   0   4\n#&gt; 5     0.160189               0.029070                0.514535 2514 334   0  10\n#&gt;        tnr      fnr      fpr      tpr idx\n#&gt; 1 1.000000 0.997093 0.000000 0.002907   0\n#&gt; 2 1.000000 0.994186 0.000000 0.005814   1\n#&gt; 3 1.000000 0.991279 0.000000 0.008721   2\n#&gt; 4 1.000000 0.988372 0.000000 0.011628   3\n#&gt; 5 1.000000 0.970930 0.000000 0.029070   4\n#&gt; \n#&gt; ---\n#&gt;     threshold       f1       f2 f0point5 accuracy precision   recall\n#&gt; 395  0.001584 0.230409 0.428074 0.157625 0.195941  0.130204 1.000000\n#&gt; 396  0.001309 0.226763 0.423020 0.154899 0.179146  0.127881 1.000000\n#&gt; 397  0.001099 0.224470 0.419819 0.153188 0.168300  0.126424 1.000000\n#&gt; 398  0.000923 0.221792 0.416062 0.151195 0.155353  0.124728 1.000000\n#&gt; 399  0.000706 0.217653 0.410207 0.148123 0.134710  0.122116 1.000000\n#&gt; 400  0.000138 0.214866 0.406235 0.146060 0.120364  0.120364 1.000000\n#&gt;     specificity absolute_mcc min_per_class_accuracy mean_per_class_accuracy tns\n#&gt; 395    0.085919     0.105769               0.085919                0.542959 216\n#&gt; 396    0.066826     0.092443               0.066826                0.533413 168\n#&gt; 397    0.054495     0.083003               0.054495                0.527247 137\n#&gt; 398    0.039777     0.070437               0.039777                0.519889 100\n#&gt; 399    0.016309     0.044627               0.016309                0.508154  41\n#&gt; 400    0.000000     0.000000               0.000000                0.500000   0\n#&gt;     fns  fps tps      tnr      fnr      fpr      tpr idx\n#&gt; 395   0 2298 344 0.085919 0.000000 0.914081 1.000000 394\n#&gt; 396   0 2346 344 0.066826 0.000000 0.933174 1.000000 395\n#&gt; 397   0 2377 344 0.054495 0.000000 0.945505 1.000000 396\n#&gt; 398   0 2414 344 0.039777 0.000000 0.960223 1.000000 397\n#&gt; 399   0 2473 344 0.016309 0.000000 0.983691 1.000000 398\n#&gt; 400   0 2514 344 0.000000 0.000000 1.000000 1.000000 399\n#&gt; \n#&gt; $max_criteria_and_metric_scores\n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold       value idx\n#&gt; 1                       max f1  0.302412    0.708791 191\n#&gt; 2                       max f2  0.127479    0.783101 263\n#&gt; 3                 max f0point5  0.653392    0.736532 100\n#&gt; 4                 max accuracy  0.382415    0.930021 169\n#&gt; 5                max precision  0.981480    1.000000   0\n#&gt; 6                   max recall  0.005811    1.000000 381\n#&gt; 7              max specificity  0.981480    1.000000   0\n#&gt; 8             max absolute_mcc  0.382415    0.668697 169\n#&gt; 9   max min_per_class_accuracy  0.115119    0.887828 270\n#&gt; 10 max mean_per_class_accuracy  0.109444    0.890196 273\n#&gt; 11                     max tns  0.981480 2514.000000   0\n#&gt; 12                     max fns  0.981480  343.000000   0\n#&gt; 13                     max fps  0.000138 2514.000000 399\n#&gt; 14                     max tps  0.005811  344.000000 381\n#&gt; 15                     max tnr  0.981480    1.000000   0\n#&gt; 16                     max fnr  0.981480    0.997093   0\n#&gt; 17                     max fpr  0.000138    1.000000 399\n#&gt; 18                     max tpr  0.005811    1.000000 381\n#&gt; \n#&gt; $gains_lift_table\n#&gt; Gains/Lift Table: Avg response rate: 12,04 %, avg score: 11,74 %\n#&gt;    group cumulative_data_fraction lower_threshold     lift cumulative_lift\n#&gt; 1      1               0.01014696        0.926976 7.735164        7.735164\n#&gt; 2      2               0.02029391        0.879345 8.021652        7.878408\n#&gt; 3      3               0.03009097        0.849660 6.824543        7.535289\n#&gt; 4      4               0.04023793        0.808274 6.875702        7.368959\n#&gt; 5      5               0.05003499        0.775717 5.340947        6.971865\n#&gt; 6      6               0.10006998        0.485165 5.345097        6.158481\n#&gt; 7      7               0.15010497        0.251170 3.079241        5.132068\n#&gt; 8      8               0.20013996        0.123365 2.265856        4.415515\n#&gt; 9      9               0.30020994        0.044051 0.610038        3.147023\n#&gt; 10    10               0.39993002        0.024652 0.291514        2.435019\n#&gt; 11    11               0.50000000        0.014148 0.203346        1.988372\n#&gt; 12    12               0.60006998        0.008916 0.000000        1.656784\n#&gt; 13    13               0.69979006        0.005974 0.058303        1.429000\n#&gt; 14    14               0.79986004        0.003613 0.000000        1.250219\n#&gt; 15    15               0.89993002        0.001837 0.000000        1.111198\n#&gt; 16    16               1.00000000        0.000000 0.000000        1.000000\n#&gt;    response_rate    score cumulative_response_rate cumulative_score\n#&gt; 1       0.931034 0.949627                 0.931034         0.949627\n#&gt; 2       0.965517 0.904197                 0.948276         0.926912\n#&gt; 3       0.821429 0.865589                 0.906977         0.906947\n#&gt; 4       0.827586 0.828406                 0.886957         0.887141\n#&gt; 5       0.642857 0.793613                 0.839161         0.868828\n#&gt; 6       0.643357 0.637674                 0.741259         0.753251\n#&gt; 7       0.370629 0.353912                 0.617716         0.620138\n#&gt; 8       0.272727 0.181017                 0.531469         0.510358\n#&gt; 9       0.073427 0.074199                 0.378788         0.364971\n#&gt; 10      0.035088 0.032762                 0.293088         0.282137\n#&gt; 11      0.024476 0.018501                 0.239328         0.229373\n#&gt; 12      0.000000 0.011108                 0.199417         0.192974\n#&gt; 13      0.007018 0.007256                 0.172000         0.166509\n#&gt; 14      0.000000 0.004699                 0.150481         0.146265\n#&gt; 15      0.000000 0.002674                 0.133748         0.130298\n#&gt; 16      0.000000 0.001018                 0.120364         0.117361\n#&gt;    capture_rate cumulative_capture_rate        gain cumulative_gain\n#&gt; 1      0.078488                0.078488  673.516439      673.516439\n#&gt; 2      0.081395                0.159884  702.165196      687.840818\n#&gt; 3      0.066860                0.226744  582.454319      653.528935\n#&gt; 4      0.069767                0.296512  587.570168      636.895854\n#&gt; 5      0.052326                0.348837  434.094684      597.186534\n#&gt; 6      0.267442                0.616279  434.509676      515.848105\n#&gt; 7      0.154070                0.770349  207.924053      413.206754\n#&gt; 8      0.113372                0.883721  126.585624      341.551472\n#&gt; 9      0.061047                0.944767  -38.996178      214.702255\n#&gt; 10     0.029070                0.973837  -70.848633      143.501902\n#&gt; 11     0.020349                0.994186  -79.665393       98.837209\n#&gt; 12     0.000000                0.994186 -100.000000       65.678351\n#&gt; 13     0.005814                1.000000  -94.169727       42.900000\n#&gt; 14     0.000000                1.000000 -100.000000       25.021872\n#&gt; 15     0.000000                1.000000 -100.000000       11.119751\n#&gt; 16     0.000000                1.000000 -100.000000        0.000000\n#&gt;    kolmogorov_smirnov\n#&gt; 1            0.077693\n#&gt; 2            0.158690\n#&gt; 3            0.223562\n#&gt; 4            0.291341\n#&gt; 5            0.339688\n#&gt; 6            0.586844\n#&gt; 7            0.705114\n#&gt; 8            0.777118\n#&gt; 9            0.732755\n#&gt; 10           0.652437\n#&gt; 11           0.561807\n#&gt; 12           0.448044\n#&gt; 13           0.341289\n#&gt; 14           0.227526\n#&gt; 15           0.113763\n#&gt; 16           0.000000\n#&gt; \n#&gt; $residual_deviance\n#&gt; [1] 983.4878\n#&gt; \n#&gt; $null_deviance\n#&gt; [1] 2101.565\n#&gt; \n#&gt; $AIC\n#&gt; [1] 993.4878\n#&gt; \n#&gt; $null_degrees_of_freedom\n#&gt; [1] 2857\n#&gt; \n#&gt; $residual_degrees_of_freedom\n#&gt; [1] 2853\n\nh2o.auc(performance_h2o, train = T, valid = T, xval = T)\n\n#&gt; [1] 0.9517568\n\n# Caution: \"train, \"val\", and \"xval\" arugments only work for models (not performance objects)\nh2o.auc(mod_stackedensemble_h2o, train = T, valid = T, xval = T)\n\n#&gt;     train     valid      xval \n#&gt; 0.9937042 0.9544881 0.9526691\n\nh2o.giniCoef(performance_h2o)\n\n#&gt; [1] 0.9035136\n\nh2o.logloss(performance_h2o)\n\n#&gt; [1] 0.1720588\n\n# result for the training data\nh2o.confusionMatrix(mod_stackedensemble_h2o)\n\n\n\n  \n\n\nh2o.confusionMatrix(performance_h2o)\n\n\n\n  \n\n\nperformance_tbl &lt;- performance_h2o %&gt;%\n    h2o.metric() %&gt;%\n    as_tibble() \n\nperformance_tbl %&gt;% \n  glimpse()\n\n#&gt; Rows: 400\n#&gt; Columns: 20\n#&gt; $ threshold               &lt;dbl&gt; 0.9814801, 0.9726655, 0.9694359, 0.9605523, 0.…\n#&gt; $ f1                      &lt;dbl&gt; 0.005797101, 0.011560694, 0.017291066, 0.02298…\n#&gt; $ f2                      &lt;dbl&gt; 0.003631082, 0.007256894, 0.010877447, 0.01449…\n#&gt; $ f0point5                &lt;dbl&gt; 0.01436782, 0.02840909, 0.04213483, 0.05555556…\n#&gt; $ accuracy                &lt;dbl&gt; 0.8799860, 0.8803359, 0.8806858, 0.8810357, 0.…\n#&gt; $ precision               &lt;dbl&gt; 1.0000000, 1.0000000, 1.0000000, 1.0000000, 1.…\n#&gt; $ recall                  &lt;dbl&gt; 0.002906977, 0.005813953, 0.008720930, 0.01162…\n#&gt; $ specificity             &lt;dbl&gt; 1.0000000, 1.0000000, 1.0000000, 1.0000000, 1.…\n#&gt; $ absolute_mcc            &lt;dbl&gt; 0.05057644, 0.07153841, 0.08763165, 0.10120604…\n#&gt; $ min_per_class_accuracy  &lt;dbl&gt; 0.002906977, 0.005813953, 0.008720930, 0.01162…\n#&gt; $ mean_per_class_accuracy &lt;dbl&gt; 0.5014535, 0.5029070, 0.5043605, 0.5058140, 0.…\n#&gt; $ tns                     &lt;dbl&gt; 2514, 2514, 2514, 2514, 2514, 2514, 2514, 2514…\n#&gt; $ fns                     &lt;dbl&gt; 343, 342, 341, 340, 334, 332, 329, 325, 324, 3…\n#&gt; $ fps                     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2…\n#&gt; $ tps                     &lt;dbl&gt; 1, 2, 3, 4, 10, 12, 15, 19, 20, 21, 22, 23, 24…\n#&gt; $ tnr                     &lt;dbl&gt; 1.0000000, 1.0000000, 1.0000000, 1.0000000, 1.…\n#&gt; $ fnr                     &lt;dbl&gt; 0.9970930, 0.9941860, 0.9912791, 0.9883721, 0.…\n#&gt; $ fpr                     &lt;dbl&gt; 0.0000000000, 0.0000000000, 0.0000000000, 0.00…\n#&gt; $ tpr                     &lt;dbl&gt; 0.002906977, 0.005813953, 0.008720930, 0.01162…\n#&gt; $ idx                     &lt;int&gt; 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, …\n\ntheme_new &lt;- theme(\n      legend.position  = \"bottom\",\n      legend.key       = element_blank(),\n      panel.background = element_rect(fill   = \"transparent\"),\n      panel.border     = element_rect(color = \"black\", fill = NA, size = 0.5),\n      panel.grid.major = element_line(color = \"grey\", size = 0.333)\n      ) \n\n#&gt; Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\n#&gt; ℹ Please use the `linewidth` argument instead.\n\n\n#&gt; Warning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\n#&gt; ℹ Please use the `linewidth` argument instead.\n\nperformance_tbl %&gt;%\n    filter(f1 == max(f1))\n\n\n\n  \n\n\nperformance_tbl %&gt;%\n    ggplot(aes(x = threshold)) +\n    geom_line(aes(y = precision), color = \"blue\", size = 1) +\n    geom_line(aes(y = recall), color = \"red\", size = 1) +\n    \n    # Insert line where precision and recall are harmonically optimized\n    geom_vline(xintercept = h2o.find_threshold_by_max_metric(performance_h2o, \"f1\")) +\n    labs(title = \"Precision vs Recall\", y = \"value\") +\n    theme_new\n\n#&gt; Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#&gt; ℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n#save_folder &lt;- \"h2o_models/perf_meas/\"\n#leaderboard_models &lt;- automl_models_h2o@leaderboard\n\n#for (i in 1:nrow(leaderboard_models)) {\n  \n # model &lt;- h2o.getModel(leaderboard_models[i, \"model_id\"])\n  \n  \n  #save_path &lt;- file.path(save_folder, paste0(model_id, \".h2o\"))\n#  h2o.saveModel(model, save_path, force = TRUE)\n#}\n\nload_model_performance_metrics &lt;- function(path, test_tbl) {\n    \n    model_h2o &lt;- h2o.loadModel(path)\n    perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n    \n    perf_h2o %&gt;%\n        h2o.metric() %&gt;%\n        as_tibble() %&gt;%\n        mutate(auc = h2o.auc(perf_h2o)) %&gt;%\n        select(tpr, fpr, auc)\n    \n}\n\nmodel_metrics_tbl &lt;- fs::dir_info(path = \"h2o_models/perf_meas/\") %&gt;%\n    select(path) %&gt;%\n    mutate(metrics = map(path, load_model_performance_metrics, test_tbl)) %&gt;%\n    unnest(cols = metrics)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\n\n\nmodel_metrics_tbl %&gt;%\n    mutate(\n        # Extract the model names\n        path = str_split(path, pattern = \"/\", simplify = T)[,3] %&gt;% as_factor(),\n        auc  = auc %&gt;% round(3) %&gt;% as.character() %&gt;% as_factor()\n        ) %&gt;%\n    ggplot(aes(fpr, tpr, color = path, linetype = auc)) +\n    geom_line(size = 1) +\n    \n    # just for demonstration purposes\n    geom_abline(color = \"red\", linetype = \"dotted\") +\n    \n    theme_new +\n    theme(\n      legend.direction = \"vertical\",\n      ) +\n    labs(\n        title = \"ROC Plot\",\n        subtitle = \"Performance of 3 Top Performing Models\"\n    )\n\n#&gt; Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#&gt; ℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\n# Precision vs Recall\n\nload_model_performance_metrics &lt;- function(path, test_tbl) {\n    \n    model_h2o &lt;- h2o.loadModel(path)\n    perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n    \n    perf_h2o %&gt;%\n        h2o.metric() %&gt;%\n        as_tibble() %&gt;%\n        mutate(auc = h2o.auc(perf_h2o)) %&gt;%\n        select(tpr, fpr, auc, precision, recall)\n    \n}\n\nmodel_metrics_tbl &lt;- fs::dir_info(path = \"h2o_models/perf_meas\") %&gt;%\n    select(path) %&gt;%\n    mutate(metrics = map(path, load_model_performance_metrics, test_tbl)) %&gt;%\n    unnest(cols = metrics)\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nmodel_metrics_tbl %&gt;%\n    mutate(\n        path = str_split(path, pattern = \"/\", simplify = T)[,3] %&gt;% as_factor(),\n        auc  = auc %&gt;% round(3) %&gt;% as.character() %&gt;% as_factor()\n    ) %&gt;%\n    ggplot(aes(recall, precision, color = path, linetype = auc)) +\n    geom_line(size = 1) +\n    theme_new + \n    theme(\n      legend.direction = \"vertical\",\n      ) +\n    labs(\n        title = \"Precision vs Recall Plot\",\n        subtitle = \"Performance of 3 Top Performing Models\"\n    )\n\n#&gt; Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\n#&gt; ℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n# Gain & Lift\n\nranked_predictions_tbl &lt;- predictions_tbl %&gt;%\n    bind_cols(test_tbl) %&gt;%\n    select(predict:Yes, went_on_backorder) %&gt;%\n    # Sorting from highest to lowest class probability\n    arrange(desc(Yes))\n\nranked_predictions_tbl %&gt;%\n    mutate(ntile = ntile(Yes, n = 10)) %&gt;%\n    group_by(ntile) %&gt;%\n    summarise(\n        cases = n(),\n        responses = sum(went_on_backorder == \"Yes\")\n    ) %&gt;%\n    arrange(desc(ntile))\n\n\n\n  \n\n\ncalculated_gain_lift_tbl &lt;- ranked_predictions_tbl %&gt;%\n    mutate(ntile = ntile(Yes, n = 10)) %&gt;%\n    group_by(ntile) %&gt;%\n    summarise(\n        cases = n(),\n        responses = sum(went_on_backorder == \"Yes\")\n    ) %&gt;%\n    arrange(desc(ntile)) %&gt;%\n    \n    # Add group numbers (opposite of ntile)\n    mutate(group = row_number()) %&gt;%\n    select(group, cases, responses) %&gt;%\n    \n    # Calculations\n    mutate(\n        cumulative_responses = cumsum(responses),\n        pct_responses        = responses / sum(responses),\n        gain                 = cumsum(pct_responses),\n        cumulative_pct_cases = cumsum(cases) / sum(cases),\n        lift                 = gain / cumulative_pct_cases,\n        gain_baseline        = cumulative_pct_cases,\n        lift_baseline        = gain_baseline / cumulative_pct_cases\n    )\n\ncalculated_gain_lift_tbl \n\n\n\n  \n\n\n\n\ngain_lift_tbl &lt;- performance_h2o %&gt;%\n    h2o.gainsLift() %&gt;%\n    as.tibble()\n\n## Gain Chart\n\ngain_transformed_tbl &lt;- gain_lift_tbl %&gt;% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %&gt;%\n    select(-contains(\"lift\")) %&gt;%\n    mutate(baseline = cumulative_data_fraction) %&gt;%\n    rename(gain     = cumulative_capture_rate) %&gt;%\n    # prepare the data for the plotting (for the color and group aesthetics)\n    pivot_longer(cols = c(gain, baseline), values_to = \"value\", names_to = \"key\")\n\ngain_transformed_tbl %&gt;%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Gain Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Gain\"\n    ) +\n    theme_new\n\n\n\n\n\n\n\n\n## Lift Plot\n\nlift_transformed_tbl &lt;- gain_lift_tbl %&gt;% \n    select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift) %&gt;%\n    select(-contains(\"capture\")) %&gt;%\n    mutate(baseline = 1) %&gt;%\n    rename(lift = cumulative_lift) %&gt;%\n    pivot_longer(cols = c(lift, baseline), values_to = \"value\", names_to = \"key\")\n\nlift_transformed_tbl %&gt;%\n    ggplot(aes(x = cumulative_data_fraction, y = value, color = key)) +\n    geom_line(size = 1.5) +\n    labs(\n        title = \"Lift Chart\",\n        x = \"Cumulative Data Fraction\",\n        y = \"Lift\"\n    ) +\n    theme_new\n\n\n\n\n\n\n\n\n# 5. Performance Visualization ----  \nlibrary(cowplot)\n\n#&gt; \n#&gt; Attache Paket: 'cowplot'\n\n\n#&gt; Das folgende Objekt ist maskiert 'package:lubridate':\n#&gt; \n#&gt;     stamp\n\nlibrary(glue)\n\n\n# set values to test the function while building it\nh2o_leaderboard &lt;- automl_models_h2o@leaderboard\nnewdata &lt;- test_tbl\norder_by &lt;- \"auc\"\nmax_models &lt;- 4\nsize &lt;- 1\n\nplot_h2o_performance &lt;- function(h2o_leaderboard, newdata, order_by = c(\"auc\", \"logloss\"),\n                                 max_models = 3, size = 1.5) {\n    \n    # Inputs\n    \n    leaderboard_tbl &lt;- h2o_leaderboard %&gt;%\n        as_tibble() %&gt;%\n        slice(1:max_models)\n    \n    newdata_tbl &lt;- newdata %&gt;%\n        as_tibble()\n    \n    # Selecting the first, if nothing is provided\n    order_by      &lt;- tolower(order_by[[1]]) \n    \n    # Convert string stored in a variable to column name (symbol)\n    order_by_expr &lt;- rlang::sym(order_by)\n\n    # Turn of the progress bars ( opposite h2o.show_progress())\n    h2o.no_progress()\n    \n    # 1. Model metrics\n    \n    get_model_performance_metrics &lt;- function(model_id, test_tbl) {\n        \n        model_h2o &lt;- h2o.getModel(model_id)\n        perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl))\n        \n        perf_h2o %&gt;%\n            h2o.metric() %&gt;%\n            as.tibble() %&gt;%\n            select(threshold, tpr, fpr, precision, recall)\n        \n    }\n    \n    model_metrics_tbl &lt;- leaderboard_tbl %&gt;%\n        mutate(metrics = map(model_id, get_model_performance_metrics, newdata_tbl)) %&gt;%\n        unnest(cols = metrics) %&gt;%\n        mutate(\n          model_id = as_factor(model_id) %&gt;% \n                      # programmatically reorder factors depending on order_by\n                      fct_reorder(!! order_by_expr, \n                                  .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n          auc      = auc %&gt;% \n                      round(3) %&gt;% \n                      as.character() %&gt;% \n                      as_factor() %&gt;% \n                      fct_reorder(as.numeric(model_id)),\n          logloss  = logloss %&gt;% \n                      round(4) %&gt;% \n                      as.character() %&gt;% \n                      as_factor() %&gt;% \n                      fct_reorder(as.numeric(model_id))\n        )\n    \n    \n    # 1A. ROC Plot\n    \n    p1 &lt;- model_metrics_tbl %&gt;%\n        ggplot(aes(fpr, tpr, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_new +\n        labs(title = \"ROC\", x = \"FPR\", y = \"TPR\") +\n        theme(legend.direction = \"vertical\") \n        \n    \n    # 1B. Precision vs Recall\n    \n    p2 &lt;- model_metrics_tbl %&gt;%\n        ggplot(aes(recall, precision, color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        theme_new +\n        labs(title = \"Precision Vs Recall\", x = \"Recall\", y = \"Precision\") +\n        theme(legend.position = \"none\") \n    \n    \n    # 2. Gain / Lift\n    \n    get_gain_lift &lt;- function(model_id, test_tbl) {\n        \n        model_h2o &lt;- h2o.getModel(model_id)\n        perf_h2o  &lt;- h2o.performance(model_h2o, newdata = as.h2o(test_tbl)) \n        \n        perf_h2o %&gt;%\n            h2o.gainsLift() %&gt;%\n            as.tibble() %&gt;%\n            select(group, cumulative_data_fraction, cumulative_capture_rate, cumulative_lift)\n        \n    }\n    \n    gain_lift_tbl &lt;- leaderboard_tbl %&gt;%\n        mutate(metrics = map(model_id, get_gain_lift, newdata_tbl)) %&gt;%\n        unnest(cols = metrics) %&gt;%\n        mutate(\n            model_id = as_factor(model_id) %&gt;% \n                fct_reorder(!! order_by_expr, \n                            .desc = ifelse(order_by == \"auc\", TRUE, FALSE)),\n            auc  = auc %&gt;% \n                round(3) %&gt;% \n                as.character() %&gt;% \n                as_factor() %&gt;% \n                fct_reorder(as.numeric(model_id)),\n            logloss = logloss %&gt;% \n                round(4) %&gt;% \n                as.character() %&gt;% \n                as_factor() %&gt;% \n                fct_reorder(as.numeric(model_id))\n        ) %&gt;%\n        rename(\n            gain = cumulative_capture_rate,\n            lift = cumulative_lift\n        ) \n    \n    # 2A. Gain Plot\n    \n    p3 &lt;- gain_lift_tbl %&gt;%\n        ggplot(aes(cumulative_data_fraction, gain, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size,) +\n        geom_segment(x = 0, y = 0, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_new +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Gain\",\n             x = \"Cumulative Data Fraction\", y = \"Gain\") +\n        theme(legend.position = \"none\")\n    \n    # 2B. Lift Plot\n    \n    p4 &lt;- gain_lift_tbl %&gt;%\n        ggplot(aes(cumulative_data_fraction, lift, \n                          color = model_id, linetype = !! order_by_expr)) +\n        geom_line(size = size) +\n        geom_segment(x = 0, y = 1, xend = 1, yend = 1, \n                     color = \"red\", size = size, linetype = \"dotted\") +\n        theme_new +\n        expand_limits(x = c(0, 1), y = c(0, 1)) +\n        labs(title = \"Lift\",\n             x = \"Cumulative Data Fraction\", y = \"Lift\") +\n        theme(legend.position = \"none\") \n    \n    \n    # Combine using cowplot\n    \n    # cowplot::get_legend extracts a legend from a ggplot object\n    p_legend &lt;- get_legend(p1)\n    # Remove legend from p1\n    p1 &lt;- p1 + theme(legend.position = \"none\")\n    \n    # cowplot::plt_grid() combines multiple ggplots into a single cowplot object\n    p &lt;- cowplot::plot_grid(p1, p2, p3, p4, ncol = 2)\n    \n    # cowplot::ggdraw() sets up a drawing layer\n    p_title &lt;- ggdraw() + \n    \n        # cowplot::draw_label() draws text on a ggdraw layer / ggplot object\n        draw_label(\"H2O Model Metrics\", size = 18, fontface = \"bold\", \n                   color = \"#2C3E50\")\n    \n    p_subtitle &lt;- ggdraw() + \n        draw_label(glue(\"Ordered by {toupper(order_by)}\"), size = 10,  \n                   color = \"#2C3E50\")\n    \n    # Combine everything\n    ret &lt;- plot_grid(p_title, p_subtitle, p, p_legend, \n    \n                     # Adjust the relative spacing, so that the legends always fits\n                     ncol = 1, rel_heights = c(0.05, 0.05, 1, 0.05 * max_models))\n    \n    h2o.show_progress()\n    \n    return(ret)\n    \n}\n\nautoml_models_h2o@leaderboard %&gt;%\n    plot_h2o_performance(newdata = test_tbl, order_by = \"logloss\", \n                         size = 0.5, max_models = 4)"
  },
  {
    "objectID": "content/01_journal/10_chall_6.html",
    "href": "content/01_journal/10_chall_6.html",
    "title": "chall 3",
    "section": "",
    "text": "library(h2o)\n\n#&gt; \n#&gt; ----------------------------------------------------------------------\n#&gt; \n#&gt; Your next step is to start H2O:\n#&gt;     &gt; h2o.init()\n#&gt; \n#&gt; For H2O package documentation, ask for help:\n#&gt;     &gt; ??h2o\n#&gt; \n#&gt; After starting H2O, you can use the Web UI at http://localhost:54321\n#&gt; For more information visit https://docs.h2o.ai\n#&gt; \n#&gt; ----------------------------------------------------------------------\n\n\n#&gt; \n#&gt; Attache Paket: 'h2o'\n\n\n#&gt; Die folgenden Objekte sind maskiert von 'package:stats':\n#&gt; \n#&gt;     cor, sd, var\n\n\n#&gt; Die folgenden Objekte sind maskiert von 'package:base':\n#&gt; \n#&gt;     %*%, %in%, &&, ||, apply, as.factor, as.numeric, colnames,\n#&gt;     colnames&lt;-, ifelse, is.character, is.factor, is.numeric, log,\n#&gt;     log10, log1p, log2, round, signif, trunc\n\nlibrary(recipes)\n\n#&gt; Lade nötiges Paket: dplyr\n\n\n#&gt; \n#&gt; Attache Paket: 'dplyr'\n\n\n#&gt; Die folgenden Objekte sind maskiert von 'package:stats':\n#&gt; \n#&gt;     filter, lag\n\n\n#&gt; Die folgenden Objekte sind maskiert von 'package:base':\n#&gt; \n#&gt;     intersect, setdiff, setequal, union\n\n\n#&gt; \n#&gt; Attache Paket: 'recipes'\n\n\n#&gt; Das folgende Objekt ist maskiert 'package:stats':\n#&gt; \n#&gt;     step\n\nlibrary(readxl)\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ forcats   1.0.0     ✔ readr     2.1.4\n#&gt; ✔ ggplot2   3.4.2     ✔ stringr   1.5.0\n#&gt; ✔ lubridate 1.9.2     ✔ tibble    3.2.1\n#&gt; ✔ purrr     1.0.1     ✔ tidyr     1.3.0\n\n\n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ lubridate::day()   masks h2o::day()\n#&gt; ✖ dplyr::filter()    masks stats::filter()\n#&gt; ✖ stringr::fixed()   masks recipes::fixed()\n#&gt; ✖ lubridate::hour()  masks h2o::hour()\n#&gt; ✖ dplyr::lag()       masks stats::lag()\n#&gt; ✖ lubridate::month() masks h2o::month()\n#&gt; ✖ lubridate::week()  masks h2o::week()\n#&gt; ✖ lubridate::year()  masks h2o::year()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidyquant)\n\n#&gt; Lade nötiges Paket: PerformanceAnalytics\n#&gt; Lade nötiges Paket: xts\n#&gt; Lade nötiges Paket: zoo\n#&gt; \n#&gt; Attache Paket: 'zoo'\n#&gt; \n#&gt; Die folgenden Objekte sind maskiert von 'package:base':\n#&gt; \n#&gt;     as.Date, as.Date.numeric\n#&gt; \n#&gt; \n#&gt; ######################### Warning from 'xts' package ##########################\n#&gt; #                                                                             #\n#&gt; # The dplyr lag() function breaks how base R's lag() function is supposed to  #\n#&gt; # work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n#&gt; # source() into this session won't work correctly.                            #\n#&gt; #                                                                             #\n#&gt; # Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n#&gt; # conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n#&gt; # dplyr from breaking base R's lag() function.                                #\n#&gt; #                                                                             #\n#&gt; # Code in packages is not affected. It's protected by R's namespace mechanism #\n#&gt; # Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#&gt; #                                                                             #\n#&gt; ###############################################################################\n#&gt; \n#&gt; Attache Paket: 'xts'\n#&gt; \n#&gt; Die folgenden Objekte sind maskiert von 'package:dplyr':\n#&gt; \n#&gt;     first, last\n#&gt; \n#&gt; \n#&gt; Attache Paket: 'PerformanceAnalytics'\n#&gt; \n#&gt; Das folgende Objekt ist maskiert 'package:graphics':\n#&gt; \n#&gt;     legend\n#&gt; \n#&gt; Lade nötiges Paket: quantmod\n#&gt; Lade nötiges Paket: TTR\n#&gt; Registered S3 method overwritten by 'quantmod':\n#&gt;   method            from\n#&gt;   as.zoo.data.frame zoo\n\nlibrary(lime)\n\n#&gt; \n#&gt; Attache Paket: 'lime'\n#&gt; \n#&gt; Das folgende Objekt ist maskiert 'package:dplyr':\n#&gt; \n#&gt;     explain\n\nlibrary(gridExtra)\n\n#&gt; \n#&gt; Attache Paket: 'gridExtra'\n#&gt; \n#&gt; Das folgende Objekt ist maskiert 'package:dplyr':\n#&gt; \n#&gt;     combine\n\nlibrary(rsample)\n\nprocess_hr_data_readable &lt;- function(data, definitions_tbl) {\n  \n  definitions_list &lt;- definitions_tbl %&gt;%\n    fill(...1, .direction = \"down\") %&gt;%\n    filter(!is.na(...2)) %&gt;%\n    separate(...2, into = c(\"key\", \"value\"), sep = \" '\", remove = TRUE) %&gt;%\n    rename(column_name = ...1) %&gt;%\n    mutate(key = as.numeric(key)) %&gt;%\n    mutate(value = value %&gt;% str_replace(pattern = \"'\", replacement = \"\")) %&gt;%\n    split(.$column_name) %&gt;%\n    map(~ select(., -column_name)) %&gt;%\n    map(~ mutate(., value = as_factor(value))) \n  \n  for (i in seq_along(definitions_list)) {\n    list_name &lt;- names(definitions_list)[i]\n    colnames(definitions_list[[i]]) &lt;- c(list_name, paste0(list_name, \"_value\"))\n  }\n  \n  data_merged_tbl &lt;- list(HR_Data = data) %&gt;%\n    append(definitions_list, after = 1) %&gt;%\n    reduce(left_join) %&gt;%\n    select(-one_of(names(definitions_list))) %&gt;%\n    set_names(str_replace_all(names(.), pattern = \"_value\", \n                              replacement = \"\")) %&gt;%\n    select(sort(names(.))) %&gt;%\n    mutate_if(is.character, as.factor) %&gt;%\n    mutate(\n      BusinessTravel = BusinessTravel %&gt;% fct_relevel(\"Non-Travel\", \n                                                      \"Travel_Rarely\", \n                                                      \"Travel_Frequently\"),\n      MaritalStatus  = MaritalStatus %&gt;% fct_relevel(\"Single\", \n                                                     \"Married\", \n                                                     \"Divorced\")\n    )\n  \n  return(data_merged_tbl)\n  \n}\n# Load Data\nemployee_attrition_tbl &lt;- read_csv(\"datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.txt\")\n\n#&gt; Rows: 1470 Columns: 35\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr  (9): Attrition, BusinessTravel, Department, EducationField, Gender, Job...\n#&gt; dbl (26): Age, DailyRate, DistanceFromHome, Education, EmployeeCount, Employ...\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ndefinitions_raw_tbl    &lt;- read_excel(\"data_definitions.xlsx\", sheet = 1, col_names = FALSE)\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n#&gt; • `` -&gt; `...2`\n\nset.seed(seed = 1113)\nsplit_obj &lt;- rsample::initial_split(employee_attrition_tbl, prop = 0.85)\n\n# Assign training and test data\ntrain_raw_tbl &lt;- training(split_obj)\ntest_raw_tbl  &lt;- testing(split_obj)\n# If we had our raw data already split into train and test data\ntrain_readable_tbl &lt;- process_hr_data_readable(train_raw_tbl, definitions_raw_tbl)\n\n#&gt; Joining with `by = join_by(Education)`\n#&gt; Joining with `by = join_by(EnvironmentSatisfaction)`\n#&gt; Joining with `by = join_by(JobInvolvement)`\n#&gt; Joining with `by = join_by(JobSatisfaction)`\n#&gt; Joining with `by = join_by(PerformanceRating)`\n#&gt; Joining with `by = join_by(RelationshipSatisfaction)`\n#&gt; Joining with `by = join_by(WorkLifeBalance)`\n\ntest_readable_tbl   &lt;- process_hr_data_readable(test_raw_tbl, definitions_raw_tbl)\n\n#&gt; Joining with `by = join_by(Education)`\n#&gt; Joining with `by = join_by(EnvironmentSatisfaction)`\n#&gt; Joining with `by = join_by(JobInvolvement)`\n#&gt; Joining with `by = join_by(JobSatisfaction)`\n#&gt; Joining with `by = join_by(PerformanceRating)`\n#&gt; Joining with `by = join_by(RelationshipSatisfaction)`\n#&gt; Joining with `by = join_by(WorkLifeBalance)`\n\nemployee_attrition_readable_tbl_a &lt;- process_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl)\n\n#&gt; Joining with `by = join_by(Education)`\n#&gt; Joining with `by = join_by(EnvironmentSatisfaction)`\n#&gt; Joining with `by = join_by(JobInvolvement)`\n#&gt; Joining with `by = join_by(JobSatisfaction)`\n#&gt; Joining with `by = join_by(PerformanceRating)`\n#&gt; Joining with `by = join_by(RelationshipSatisfaction)`\n#&gt; Joining with `by = join_by(WorkLifeBalance)`\n\n# ML Preprocessing Recipe \nrecipe_obj &lt;- recipe(Attrition ~ ., data = train_readable_tbl) %&gt;%\n  step_zv(all_predictors()) %&gt;%\n  step_mutate_at(c(\"JobLevel\", \"StockOptionLevel\"), fn = as.factor) %&gt;% \n  prep()\n\nrecipe_obj\n\n#&gt; \n#&gt; ── Recipe ──────────────────────────────────────────────────────────────────────\n#&gt; \n#&gt; ── Inputs \n#&gt; Number of variables by role\n#&gt; outcome:    1\n#&gt; predictor: 34\n#&gt; \n#&gt; ── Training information \n#&gt; Training data contained 1249 data points and no incomplete rows.\n#&gt; \n#&gt; ── Operations \n#&gt; • Zero variance filter removed: EmployeeCount, Over18, StandardHours | Trained\n#&gt; • Variable mutation for: JobLevel, StockOptionLevel | Trained\n\ntrain_tbl &lt;- bake(recipe_obj, new_data = train_readable_tbl)\ntest_tbl  &lt;- bake(recipe_obj, new_data = test_readable_tbl)\n\n# 2. Models ----\n\nh2o.init()\n\n#&gt;  Connection successful!\n#&gt; \n#&gt; R is connected to the H2O cluster: \n#&gt;     H2O cluster uptime:         10 days 10 hours \n#&gt;     H2O cluster timezone:       +01:00 \n#&gt;     H2O data parsing timezone:  UTC \n#&gt;     H2O cluster version:        3.40.0.4 \n#&gt;     H2O cluster version age:    1 month and 11 days \n#&gt;     H2O cluster name:           H2O_started_from_R_ehsan_yjp144 \n#&gt;     H2O cluster total nodes:    1 \n#&gt;     H2O cluster total memory:   1.37 GB \n#&gt;     H2O cluster total cores:    4 \n#&gt;     H2O cluster allowed cores:  4 \n#&gt;     H2O cluster healthy:        TRUE \n#&gt;     H2O Connection ip:          localhost \n#&gt;     H2O Connection port:        54321 \n#&gt;     H2O Connection proxy:       NA \n#&gt;     H2O Internal Security:      FALSE \n#&gt;     R Version:                  R version 4.3.0 (2023-04-21 ucrt)\n\nautoml_leader &lt;- h2o.loadModel(\"C:/Users/ehsan/Desktop/DataSciece/ds_ml/ss23-bdml-EhssRos/content/01_journal/h20_models_attr/StackedEnsemble_AllModels_2_AutoML_10_20230608_152758\")\nautoml_leader\n\n#&gt; Model Details:\n#&gt; ==============\n#&gt; \n#&gt; H2OBinomialModel: stackedensemble\n#&gt; Model ID:  StackedEnsemble_AllModels_2_AutoML_10_20230608_152758 \n#&gt; Model Summary for Stacked Ensemble: \n#&gt;                                          key            value\n#&gt; 1                          Stacking strategy cross_validation\n#&gt; 2       Number of base models (used / total)              5/9\n#&gt; 3           # GBM base models (used / total)              2/5\n#&gt; 4           # GLM base models (used / total)              1/1\n#&gt; 5           # DRF base models (used / total)              1/2\n#&gt; 6  # DeepLearning base models (used / total)              1/1\n#&gt; 7                      Metalearner algorithm              GLM\n#&gt; 8         Metalearner fold assignment scheme           Random\n#&gt; 9                         Metalearner nfolds                5\n#&gt; 10                   Metalearner fold_column               NA\n#&gt; 11        Custom metalearner hyperparameters             None\n#&gt; \n#&gt; \n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on training data. **\n#&gt; \n#&gt; MSE:  0.05705057\n#&gt; RMSE:  0.2388526\n#&gt; LogLoss:  0.2103457\n#&gt; Mean Per-Class Error:  0.1518365\n#&gt; AUC:  0.9335959\n#&gt; AUCPR:  0.83842\n#&gt; Gini:  0.8671919\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;         No Yes    Error      Rate\n#&gt; No     891  18 0.019802   =18/909\n#&gt; Yes     44 111 0.283871   =44/155\n#&gt; Totals 935 129 0.058271  =62/1064\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold      value idx\n#&gt; 1                       max f1  0.383374   0.781690 111\n#&gt; 2                       max f2  0.195020   0.793839 178\n#&gt; 3                 max f0point5  0.391545   0.832061 108\n#&gt; 4                 max accuracy  0.391545   0.941729 108\n#&gt; 5                max precision  0.974669   1.000000   0\n#&gt; 6                   max recall  0.008196   1.000000 386\n#&gt; 7              max specificity  0.974669   1.000000   0\n#&gt; 8             max absolute_mcc  0.383374   0.752593 111\n#&gt; 9   max min_per_class_accuracy  0.170673   0.876788 192\n#&gt; 10 max mean_per_class_accuracy  0.195020   0.882753 178\n#&gt; 11                     max tns  0.974669 909.000000   0\n#&gt; 12                     max fns  0.974669 154.000000   0\n#&gt; 13                     max fps  0.000967 909.000000 399\n#&gt; 14                     max tps  0.008196 155.000000 386\n#&gt; 15                     max tnr  0.974669   1.000000   0\n#&gt; 16                     max fnr  0.974669   0.993548   0\n#&gt; 17                     max fpr  0.000967   1.000000 399\n#&gt; 18                     max tpr  0.008196   1.000000 386\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on validation data. **\n#&gt; \n#&gt; MSE:  0.1003658\n#&gt; RMSE:  0.3168056\n#&gt; LogLoss:  0.3339719\n#&gt; Mean Per-Class Error:  0.1757966\n#&gt; AUC:  0.8657358\n#&gt; AUCPR:  0.7272188\n#&gt; Gini:  0.7314715\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;         No Yes    Error     Rate\n#&gt; No     134  13 0.088435  =13/147\n#&gt; Yes     10  28 0.263158   =10/38\n#&gt; Totals 144  41 0.124324  =23/185\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold      value idx\n#&gt; 1                       max f1  0.313082   0.708861  40\n#&gt; 2                       max f2  0.313082   0.725389  40\n#&gt; 3                 max f0point5  0.438243   0.733333  27\n#&gt; 4                 max accuracy  0.438243   0.881081  27\n#&gt; 5                max precision  0.936237   1.000000   0\n#&gt; 6                   max recall  0.021594   1.000000 145\n#&gt; 7              max specificity  0.936237   1.000000   0\n#&gt; 8             max absolute_mcc  0.313082   0.630703  40\n#&gt; 9   max min_per_class_accuracy  0.165734   0.763158  58\n#&gt; 10 max mean_per_class_accuracy  0.313082   0.824203  40\n#&gt; 11                     max tns  0.936237 147.000000   0\n#&gt; 12                     max fns  0.936237  37.000000   0\n#&gt; 13                     max fps  0.002711 147.000000 184\n#&gt; 14                     max tps  0.021594  38.000000 145\n#&gt; 15                     max tnr  0.936237   1.000000   0\n#&gt; 16                     max fnr  0.936237   0.973684   0\n#&gt; 17                     max fpr  0.002711   1.000000 184\n#&gt; 18                     max tpr  0.021594   1.000000 145\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; H2OBinomialMetrics: stackedensemble\n#&gt; ** Reported on cross-validation data. **\n#&gt; ** 5-fold cross-validation on training data (Metrics computed for combined holdout predictions) **\n#&gt; \n#&gt; MSE:  0.08470748\n#&gt; RMSE:  0.2910455\n#&gt; LogLoss:  0.2996652\n#&gt; Mean Per-Class Error:  0.2218993\n#&gt; AUC:  0.8382164\n#&gt; AUCPR:  0.6134854\n#&gt; Gini:  0.6764328\n#&gt; \n#&gt; Confusion Matrix (vertical: actual; across: predicted) for F1-optimal threshold:\n#&gt;         No Yes    Error       Rate\n#&gt; No     834  75 0.082508    =75/909\n#&gt; Yes     56  99 0.361290    =56/155\n#&gt; Totals 890 174 0.123120  =131/1064\n#&gt; \n#&gt; Maximum Metrics: Maximum metrics at their respective thresholds\n#&gt;                         metric threshold      value idx\n#&gt; 1                       max f1  0.279282   0.601824 134\n#&gt; 2                       max f2  0.225610   0.650358 163\n#&gt; 3                 max f0point5  0.485577   0.653105  67\n#&gt; 4                 max accuracy  0.485577   0.895677  67\n#&gt; 5                max precision  0.956065   1.000000   0\n#&gt; 6                   max recall  0.001173   1.000000 399\n#&gt; 7              max specificity  0.956065   1.000000   0\n#&gt; 8             max absolute_mcc  0.306248   0.531809 125\n#&gt; 9   max min_per_class_accuracy  0.138626   0.756876 224\n#&gt; 10 max mean_per_class_accuracy  0.225610   0.791657 163\n#&gt; 11                     max tns  0.956065 909.000000   0\n#&gt; 12                     max fns  0.956065 154.000000   0\n#&gt; 13                     max fps  0.001173 909.000000 399\n#&gt; 14                     max tps  0.001173 155.000000 399\n#&gt; 15                     max tnr  0.956065   1.000000   0\n#&gt; 16                     max fnr  0.956065   0.993548   0\n#&gt; 17                     max fpr  0.001173   1.000000 399\n#&gt; 18                     max tpr  0.001173   1.000000 399\n#&gt; \n#&gt; Gains/Lift Table: Extract with `h2o.gainsLift(&lt;model&gt;, &lt;data&gt;)` or `h2o.gainsLift(&lt;model&gt;, valid=&lt;T/F&gt;, xval=&lt;T/F&gt;)`\n#&gt; Cross-Validation Metrics Summary: \n#&gt;                mean       sd cv_1_valid cv_2_valid cv_3_valid cv_4_valid\n#&gt; accuracy   0.892051 0.029196   0.930556   0.898230   0.870466   0.904545\n#&gt; auc        0.843696 0.046958   0.830785   0.832653   0.849874   0.917141\n#&gt; err        0.107949 0.029196   0.069444   0.101770   0.129534   0.095455\n#&gt; err_count 22.800000 5.495453  15.000000  23.000000  25.000000  21.000000\n#&gt; f0point5   0.640648 0.061952   0.721649   0.616883   0.578035   0.689655\n#&gt;           cv_5_valid\n#&gt; accuracy    0.856459\n#&gt; auc         0.788026\n#&gt; err         0.143541\n#&gt; err_count  30.000000\n#&gt; f0point5    0.597015\n#&gt; \n#&gt; ---\n#&gt;                         mean        sd cv_1_valid cv_2_valid cv_3_valid\n#&gt; precision           0.643463  0.089250   0.777778   0.612903   0.555556\n#&gt; r2                  0.320371  0.067990   0.324689   0.350455   0.262249\n#&gt; recall              0.647504  0.057105   0.560000   0.633333   0.689655\n#&gt; residual_deviance 125.772180 17.488457 115.662870 123.191250 119.296830\n#&gt; rmse                0.290081  0.028050   0.262897   0.273454   0.306915\n#&gt; specificity         0.932459  0.032259   0.979058   0.938776   0.902439\n#&gt;                   cv_4_valid cv_5_valid\n#&gt; precision           0.685714   0.585366\n#&gt; r2                  0.415621   0.248843\n#&gt; recall              0.705882   0.648649\n#&gt; residual_deviance 114.272580 156.437380\n#&gt; rmse                0.276325   0.330814\n#&gt; specificity         0.940860   0.901163\n\npredictions_tbl &lt;- automl_leader %&gt;% \n  h2o.predict(newdata = as.h2o(test_tbl)) %&gt;%\n  as.tibble() %&gt;%\n  bind_cols(\n    test_tbl %&gt;%\n      select(Attrition, EmployeeNumber)\n  )\n\n#&gt; Warning: `as.tibble()` was deprecated in tibble 2.0.0.\n#&gt; ℹ Please use `as_tibble()` instead.\n#&gt; ℹ The signature and semantics have changed, see `?as_tibble`.\n\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\npredictions_tbl\n\n\n\n  \n\n\nexplainer &lt;- train_tbl %&gt;%\n  select(-Attrition) %&gt;%\n  lime(\n    model           = automl_leader,\n    bin_continuous  = TRUE,\n    n_bins          = 4,\n    quantile_bins   = TRUE\n  )\n\nexplanation &lt;- test_tbl %&gt;%\n  slice(1) %&gt;%\n  select(-Attrition) %&gt;%\n  lime::explain(\n    \n    # Pass our explainer object\n    explainer = explainer,\n    # Because it is a binary classification model: 1\n    n_labels   = 1,\n    # number of features to be returned\n    n_features = 8,\n    # number of localized linear models\n    n_permutations = 5000,\n    # Let's start with 1\n    kernel_width   = 1\n  )\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nexplanation %&gt;%\n  as.tibble() %&gt;%\n  select(feature:prediction) \n\n\n\n  \n\n\ng &lt;- plot_features(explanation = explanation, ncol = 1)\ng\n\n\n\n\n\n\nexplanation &lt;- test_tbl %&gt;%\n  slice(1:20) %&gt;%\n  select(-Attrition) %&gt;%\n  lime::explain(\n    explainer = explainer,\n    n_labels   = 1,\n    n_features = 8,\n    n_permutations = 5000,\n    kernel_width   = 1.2\n  )\n\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n#&gt; \n  |                                                                            \n  |                                                                      |   0%\n  |                                                                            \n  |======================================================================| 100%\n\nexplanation %&gt;%\n  as.tibble()"
  },
  {
    "objectID": "content/01_journal/10_chall_6.html#recreate-plot_features",
    "href": "content/01_journal/10_chall_6.html#recreate-plot_features",
    "title": "chall 3",
    "section": "\n1 recreate plot_features()",
    "text": "1 recreate plot_features()\n\nmy_plot_features_single &lt;- function(case) {\n  \n  case &lt;- case %&gt;% mutate(posnegtype = ifelse(feature_weight&lt;0, \"Contradicts\", \"Supports\"))\n  \n  case_nr &lt;- case %&gt;%slice(1)%&gt;%select(case)%&gt;%pull\n  \n  case_label &lt;- case %&gt;%slice(1)%&gt;%select(label)%&gt;%pull\n  \n  probability &lt;- case %&gt;% summarize(mean = mean(label_prob)) %&gt;% round(digits=2)\n  explanation_fit &lt;- case %&gt;% summarize(mean = mean(model_r2)) %&gt;% round(digits=2)\n  \n  \n  \n  g &lt;- ggplot(data=case, aes( x = reorder(feature_desc, abs(feature_weight)), y=feature_weight, fill = posnegtype)) +\n    theme_minimal() +\n    coord_flip() +\n    geom_col()  +\n    scale_fill_manual(values = c('#990000', '#444499'), drop = FALSE) +\n    labs(\n      title = \"\",\n      subtitle = paste(\"Case: \", case_nr,\n                       \"\\nLabel: \", case_label, \n                       \"\\nProbability: \", probability , \n                       \"\\nExplanation Fit: \", explanation_fit ),\n      x=\"Features\",\n      y=\"Weight\",\n      fill =\"\"\n    ) +\n    \n    theme(legend.position = \"bottom\")\n  \n  return(g)\n  \n}\n\n\nexplanation %&gt;% \n  as.tibble()\n\n\n\n  \n\n\ncase_1 &lt;- explanation %&gt;%\n    filter(case == 1)\n\ncase_1 %&gt;%\n    plot_features()\n\n\n\n\n\n\n\n\nmy_plot_single &lt;- function(case) {\n  case &lt;- case %&gt;% mutate(type = ifelse(feature_weight &lt; 0, \"Contradicts\", \"Support\"))\n  case_nr &lt;- case[1, \"case\"]\n  case_label &lt;- case[1, \"label\"]\n  prob &lt;- case %&gt;% summarize(mean = mean(label_prob)) %&gt;% round(2)\n  fit &lt;- case %&gt;% summarize(mean = mean(model_r2)) %&gt;% round(2)\n  \n  g &lt;- ggplot(case, aes(x = reorder(feature_desc, abs(feature_weight)), y = feature_weight, fill = type)) +\n    theme_minimal() +\n    coord_flip() +\n    geom_col() +\n    scale_fill_manual(values = c('#990000', '#444499'), drop = FALSE) +\n    labs(\n      title = \"\",\n      subtitle = paste(\"Case:\", case_nr,\n                       \"\\nLabel:\", case_label,\n                       \"\\nProbability:\", prob,\n                       \"\\nExplanation Fit:\", fit),\n      x = \"Features\",\n      y = \"Weight\",\n      fill = \"\"\n    ) +\n    theme(legend.position = \"bottom\")\n  \n  return(g)\n}\ncase_1 %&gt;%\n  my_plot_single\n\n\n\n\n\n\n\n\nmy_plot_expl &lt;- function(cases) {\n  lvls &lt;- sort(unique(as.numeric(cases$case)))\n  case_nr &lt;- factor(cases$case, level = lvls)\n  \n  desc_lvls &lt;- sort(unique(cases$feature_desc))\n  feat_desc &lt;- factor(cases$feature_desc, level = desc_lvls)\n  \n  g &lt;- ggplot(cases, aes(x = case_nr, y = feat_desc), show.legend = TRUE) +\n    theme_minimal() +\n    geom_tile(aes_(fill = ~feature_weight)) +\n    facet_wrap(~label) +\n    scale_x_discrete('Case', expand = c(0, 0)) +\n    scale_y_discrete('Feature', expand = c(0, 0)) +\n    scale_fill_gradient2('Weight', low = '#999000', mid = '#eeeeee', high = '#000099') +\n    theme(panel.border = element_rect(fill = NA, colour = 'grey60', size = 1),\n          panel.grid = element_blank(),\n          legend.position = 'right',\n          axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 7))\n  \n  return(g)\n}\n\n\nexplanation  %&gt;% plot_explanations()\n\n\n\n\n\n\n\n\nexplanation  %&gt;% my_plot_expl()\n\n#&gt; Warning: `aes_()` was deprecated in ggplot2 3.0.0.\n#&gt; ℹ Please use tidy evaluation idioms with `aes()`\n\n\n#&gt; Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0.\n#&gt; ℹ Please use the `linewidth` argument instead."
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Lab Journal",
    "section": "",
    "text": "This is a template example for lab journaling. Students in the data science courses at the Institute of Entrepreneurship will use this template to learn R for business analytics. Students can replace this text as they wish."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "My Lab Journal",
    "section": "How to use",
    "text": "How to use\n\nAccept the assignment and get your own github repo.\nBlog/journal what you are doing in R, by editing the .qmd files.\nSee the links page for lots of helpful links on learning R.\nChange everything to make it your own.\nMake sure to render you website everytime before you want to upload changes"
  }
]
---
title: "chall 3"
author: "Ehssan Roshankar"

---

```{r setup, include=FALSE}
knitr::opts_chunk$set(message=FALSE,warning=FALSE, cache=TRUE)
```


```{r}
library(h2o)
library(recipes)
library(readxl)
library(tidyverse)
library(tidyquant)
library(lime)
library(gridExtra)
library(rsample)

process_hr_data_readable <- function(data, definitions_tbl) {
  
  definitions_list <- definitions_tbl %>%
    fill(...1, .direction = "down") %>%
    filter(!is.na(...2)) %>%
    separate(...2, into = c("key", "value"), sep = " '", remove = TRUE) %>%
    rename(column_name = ...1) %>%
    mutate(key = as.numeric(key)) %>%
    mutate(value = value %>% str_replace(pattern = "'", replacement = "")) %>%
    split(.$column_name) %>%
    map(~ select(., -column_name)) %>%
    map(~ mutate(., value = as_factor(value))) 
  
  for (i in seq_along(definitions_list)) {
    list_name <- names(definitions_list)[i]
    colnames(definitions_list[[i]]) <- c(list_name, paste0(list_name, "_value"))
  }
  
  data_merged_tbl <- list(HR_Data = data) %>%
    append(definitions_list, after = 1) %>%
    reduce(left_join) %>%
    select(-one_of(names(definitions_list))) %>%
    set_names(str_replace_all(names(.), pattern = "_value", 
                              replacement = "")) %>%
    select(sort(names(.))) %>%
    mutate_if(is.character, as.factor) %>%
    mutate(
      BusinessTravel = BusinessTravel %>% fct_relevel("Non-Travel", 
                                                      "Travel_Rarely", 
                                                      "Travel_Frequently"),
      MaritalStatus  = MaritalStatus %>% fct_relevel("Single", 
                                                     "Married", 
                                                     "Divorced")
    )
  
  return(data_merged_tbl)
  
}
# Load Data
employee_attrition_tbl <- read_csv("datasets-1067-1925-WA_Fn-UseC_-HR-Employee-Attrition.txt")
definitions_raw_tbl    <- read_excel("data_definitions.xlsx", sheet = 1, col_names = FALSE)

set.seed(seed = 1113)
split_obj <- rsample::initial_split(employee_attrition_tbl, prop = 0.85)

# Assign training and test data
train_raw_tbl <- training(split_obj)
test_raw_tbl  <- testing(split_obj)
# If we had our raw data already split into train and test data
train_readable_tbl <- process_hr_data_readable(train_raw_tbl, definitions_raw_tbl)
test_readable_tbl   <- process_hr_data_readable(test_raw_tbl, definitions_raw_tbl)

employee_attrition_readable_tbl_a <- process_hr_data_readable(employee_attrition_tbl, definitions_raw_tbl)

# ML Preprocessing Recipe 
recipe_obj <- recipe(Attrition ~ ., data = train_readable_tbl) %>%
  step_zv(all_predictors()) %>%
  step_mutate_at(c("JobLevel", "StockOptionLevel"), fn = as.factor) %>% 
  prep()

recipe_obj

train_tbl <- bake(recipe_obj, new_data = train_readable_tbl)
test_tbl  <- bake(recipe_obj, new_data = test_readable_tbl)

# 2. Models ----

h2o.init()

automl_leader <- h2o.loadModel("C:/Users/ehsan/Desktop/DataSciece/ds_ml/ss23-bdml-EhssRos/content/01_journal/h20_models_attr/StackedEnsemble_AllModels_2_AutoML_10_20230608_152758")
automl_leader


predictions_tbl <- automl_leader %>% 
  h2o.predict(newdata = as.h2o(test_tbl)) %>%
  as.tibble() %>%
  bind_cols(
    test_tbl %>%
      select(Attrition, EmployeeNumber)
  )

predictions_tbl

explainer <- train_tbl %>%
  select(-Attrition) %>%
  lime(
    model           = automl_leader,
    bin_continuous  = TRUE,
    n_bins          = 4,
    quantile_bins   = TRUE
  )

explanation <- test_tbl %>%
  slice(1) %>%
  select(-Attrition) %>%
  lime::explain(
    
    # Pass our explainer object
    explainer = explainer,
    # Because it is a binary classification model: 1
    n_labels   = 1,
    # number of features to be returned
    n_features = 8,
    # number of localized linear models
    n_permutations = 5000,
    # Let's start with 1
    kernel_width   = 1
  )
explanation %>%
  as.tibble() %>%
  select(feature:prediction) 





g <- plot_features(explanation = explanation, ncol = 1)
g

explanation <- test_tbl %>%
  slice(1:20) %>%
  select(-Attrition) %>%
  lime::explain(
    explainer = explainer,
    n_labels   = 1,
    n_features = 8,
    n_permutations = 5000,
    kernel_width   = 1.2
  )

explanation %>%
  as.tibble()

```

## recreate plot_features()

```{r}
my_plot_features_single <- function(case) {
  
  case <- case %>% mutate(posnegtype = ifelse(feature_weight<0, "Contradicts", "Supports"))
  
  case_nr <- case %>%slice(1)%>%select(case)%>%pull
  
  case_label <- case %>%slice(1)%>%select(label)%>%pull
  
  probability <- case %>% summarize(mean = mean(label_prob)) %>% round(digits=2)
  explanation_fit <- case %>% summarize(mean = mean(model_r2)) %>% round(digits=2)
  
  
  
  g <- ggplot(data=case, aes( x = reorder(feature_desc, abs(feature_weight)), y=feature_weight, fill = posnegtype)) +
    theme_minimal() +
    coord_flip() +
    geom_col()  +
    scale_fill_manual(values = c('#990000', '#444499'), drop = FALSE) +
    labs(
      title = "",
      subtitle = paste("Case: ", case_nr,
                       "\nLabel: ", case_label, 
                       "\nProbability: ", probability , 
                       "\nExplanation Fit: ", explanation_fit ),
      x="Features",
      y="Weight",
      fill =""
    ) +
    
    theme(legend.position = "bottom")
  
  return(g)
  
}
```
```{r}
explanation %>% 
  as.tibble()
  
case_1 <- explanation %>%
    filter(case == 1)

case_1 %>%
    plot_features()
```
```{r}
my_plot_single <- function(case) {
  case <- case %>% mutate(type = ifelse(feature_weight < 0, "Contradicts", "Support"))
  case_nr <- case[1, "case"]
  case_label <- case[1, "label"]
  prob <- case %>% summarize(mean = mean(label_prob)) %>% round(2)
  fit <- case %>% summarize(mean = mean(model_r2)) %>% round(2)
  
  g <- ggplot(case, aes(x = reorder(feature_desc, abs(feature_weight)), y = feature_weight, fill = type)) +
    theme_minimal() +
    coord_flip() +
    geom_col() +
    scale_fill_manual(values = c('#990000', '#444499'), drop = FALSE) +
    labs(
      title = "",
      subtitle = paste("Case:", case_nr,
                       "\nLabel:", case_label,
                       "\nProbability:", prob,
                       "\nExplanation Fit:", fit),
      x = "Features",
      y = "Weight",
      fill = ""
    ) +
    theme(legend.position = "bottom")
  
  return(g)
}
case_1 %>%
  my_plot_single
```
```{r}
my_plot_expl <- function(cases) {
  lvls <- sort(unique(as.numeric(cases$case)))
  case_nr <- factor(cases$case, level = lvls)
  
  desc_lvls <- sort(unique(cases$feature_desc))
  feat_desc <- factor(cases$feature_desc, level = desc_lvls)
  
  g <- ggplot(cases, aes(x = case_nr, y = feat_desc), show.legend = TRUE) +
    theme_minimal() +
    geom_tile(aes_(fill = ~feature_weight)) +
    facet_wrap(~label) +
    scale_x_discrete('Case', expand = c(0, 0)) +
    scale_y_discrete('Feature', expand = c(0, 0)) +
    scale_fill_gradient2('Weight', low = '#999000', mid = '#eeeeee', high = '#000099') +
    theme(panel.border = element_rect(fill = NA, colour = 'grey60', size = 1),
          panel.grid = element_blank(),
          legend.position = 'right',
          axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 7))
  
  return(g)
}
```
```{r}
explanation  %>% plot_explanations()
```
```{r}
explanation  %>% my_plot_expl()
```

